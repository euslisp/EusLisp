;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass gifuplastic-720-cart-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2
         joint0 joint1 joint2 joint3 joint4 joint5 joint6 ))
(defmethod gifuplastic-720-cart-object
  (:init
   (&rest args &key (name "gifuplastic-720-cart") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :gifuplastic-720-cart-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 147.5 163.75 120.0) (float-vector 122.5 163.75 120.0) (float-vector 122.5 163.75 30.0) (float-vector 147.5 163.75 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 166.25 120.0) (float-vector 147.5 166.25 120.0) (float-vector 147.5 166.25 30.0) (float-vector 122.5 166.25 30.0)))
         (instance face :init :vertices (list (float-vector 147.5 163.75 120.0) (float-vector 147.5 166.25 120.0) (float-vector 122.5 166.25 120.0) (float-vector 122.5 163.75 120.0)))
         (instance face :init :vertices (list (float-vector 147.5 163.75 30.0) (float-vector 147.5 166.25 30.0) (float-vector 147.5 166.25 120.0) (float-vector 147.5 163.75 120.0)))
         (instance face :init :vertices (list (float-vector 122.5 163.75 30.0) (float-vector 122.5 166.25 30.0) (float-vector 147.5 166.25 30.0) (float-vector 147.5 163.75 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 163.75 120.0) (float-vector 122.5 166.25 120.0) (float-vector 122.5 166.25 30.0) (float-vector 122.5 163.75 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 147.5 128.75 120.0) (float-vector 122.5 128.75 120.0) (float-vector 122.5 128.75 30.0) (float-vector 147.5 128.75 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 131.25 120.0) (float-vector 147.5 131.25 120.0) (float-vector 147.5 131.25 30.0) (float-vector 122.5 131.25 30.0)))
         (instance face :init :vertices (list (float-vector 147.5 128.75 120.0) (float-vector 147.5 131.25 120.0) (float-vector 122.5 131.25 120.0) (float-vector 122.5 128.75 120.0)))
         (instance face :init :vertices (list (float-vector 147.5 128.75 30.0) (float-vector 147.5 131.25 30.0) (float-vector 147.5 131.25 120.0) (float-vector 147.5 128.75 120.0)))
         (instance face :init :vertices (list (float-vector 122.5 128.75 30.0) (float-vector 122.5 131.25 30.0) (float-vector 147.5 131.25 30.0) (float-vector 147.5 128.75 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 128.75 120.0) (float-vector 122.5 131.25 120.0) (float-vector 122.5 131.25 30.0) (float-vector 122.5 128.75 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 147.5 -131.25 120.0) (float-vector 122.5 -131.25 120.0) (float-vector 122.5 -131.25 30.0) (float-vector 147.5 -131.25 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 -128.75 120.0) (float-vector 147.5 -128.75 120.0) (float-vector 147.5 -128.75 30.0) (float-vector 122.5 -128.75 30.0)))
         (instance face :init :vertices (list (float-vector 147.5 -131.25 120.0) (float-vector 147.5 -128.75 120.0) (float-vector 122.5 -128.75 120.0) (float-vector 122.5 -131.25 120.0)))
         (instance face :init :vertices (list (float-vector 147.5 -131.25 30.0) (float-vector 147.5 -128.75 30.0) (float-vector 147.5 -128.75 120.0) (float-vector 147.5 -131.25 120.0)))
         (instance face :init :vertices (list (float-vector 122.5 -131.25 30.0) (float-vector 122.5 -128.75 30.0) (float-vector 147.5 -128.75 30.0) (float-vector 147.5 -131.25 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 -131.25 120.0) (float-vector 122.5 -128.75 120.0) (float-vector 122.5 -128.75 30.0) (float-vector 122.5 -131.25 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 147.5 -166.25 120.0) (float-vector 122.5 -166.25 120.0) (float-vector 122.5 -166.25 30.0) (float-vector 147.5 -166.25 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 -163.75 120.0) (float-vector 147.5 -163.75 120.0) (float-vector 147.5 -163.75 30.0) (float-vector 122.5 -163.75 30.0)))
         (instance face :init :vertices (list (float-vector 147.5 -166.25 120.0) (float-vector 147.5 -163.75 120.0) (float-vector 122.5 -163.75 120.0) (float-vector 122.5 -166.25 120.0)))
         (instance face :init :vertices (list (float-vector 147.5 -166.25 30.0) (float-vector 147.5 -163.75 30.0) (float-vector 147.5 -163.75 120.0) (float-vector 147.5 -166.25 120.0)))
         (instance face :init :vertices (list (float-vector 122.5 -166.25 30.0) (float-vector 122.5 -163.75 30.0) (float-vector 147.5 -163.75 30.0) (float-vector 147.5 -166.25 30.0)))
         (instance face :init :vertices (list (float-vector 122.5 -166.25 120.0) (float-vector 122.5 -163.75 120.0) (float-vector 122.5 -163.75 30.0) (float-vector 122.5 -166.25 30.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 720.0 230.0 160.0) (float-vector 0.0 230.0 160.0) (float-vector 0.0 -230.0 160.0) (float-vector 720.0 -230.0 160.0)))
         (instance face :init :vertices (list (float-vector 0.0 230.0 120.0) (float-vector 720.0 230.0 120.0) (float-vector 720.0 -230.0 120.0) (float-vector 0.0 -230.0 120.0)))
         (instance face :init :vertices (list (float-vector 720.0 230.0 160.0) (float-vector 720.0 230.0 120.0) (float-vector 0.0 230.0 120.0) (float-vector 0.0 230.0 160.0)))
         (instance face :init :vertices (list (float-vector 720.0 -230.0 160.0) (float-vector 720.0 -230.0 120.0) (float-vector 720.0 230.0 120.0) (float-vector 720.0 230.0 160.0)))
         (instance face :init :vertices (list (float-vector 0.0 -230.0 160.0) (float-vector 0.0 -230.0 120.0) (float-vector 720.0 -230.0 120.0) (float-vector 720.0 -230.0 160.0)))
         (instance face :init :vertices (list (float-vector 0.0 230.0 160.0) (float-vector 0.0 230.0 120.0) (float-vector 0.0 -230.0 120.0) (float-vector 0.0 -230.0 160.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :green)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :gifuplastic-720-cart-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :rear-left-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 50.0 -12.5 7.105427e-15) (float-vector 48.2963 -12.5 12.941) (float-vector 43.3013 -12.5 25.0) (float-vector 35.3553 -12.5 35.3553) (float-vector 25.0 -12.5 43.3013) (float-vector 12.941 -12.5 48.2963) (float-vector 2.842171e-14 -12.5 50.0) (float-vector -12.941 -12.5 48.2963) (float-vector -25.0 -12.5 43.3013) (float-vector -35.3553 -12.5 35.3553) (float-vector -43.3013 -12.5 25.0) (float-vector -48.2963 -12.5 12.941) (float-vector -50.0 -12.5 4.973799e-14) (float-vector -48.2963 -12.5 -12.941) (float-vector -43.3013 -12.5 -25.0) (float-vector -35.3553 -12.5 -35.3553) (float-vector -25.0 -12.5 -43.3013) (float-vector -12.941 -12.5 -48.2963) (float-vector -5.684342e-14 -12.5 -50.0) (float-vector 12.941 -12.5 -48.2963) (float-vector 25.0 -12.5 -43.3013) (float-vector 35.3553 -12.5 -35.3553) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 -12.941) (float-vector 43.3013 12.5 -25.0) (float-vector 35.3553 12.5 -35.3553) (float-vector 25.0 12.5 -43.3013) (float-vector 12.941 12.5 -48.2963) (float-vector -5.684342e-14 12.5 -50.0) (float-vector -12.941 12.5 -48.2963) (float-vector -25.0 12.5 -43.3013) (float-vector -35.3553 12.5 -35.3553) (float-vector -43.3013 12.5 -25.0) (float-vector -48.2963 12.5 -12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 12.941) (float-vector -43.3013 12.5 25.0) (float-vector -35.3553 12.5 35.3553) (float-vector -25.0 12.5 43.3013) (float-vector -12.941 12.5 48.2963) (float-vector 2.842171e-14 12.5 50.0) (float-vector 12.941 12.5 48.2963) (float-vector 25.0 12.5 43.3013) (float-vector 35.3553 12.5 35.3553) (float-vector 43.3013 12.5 25.0) (float-vector 48.2963 12.5 12.941)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 48.2963 12.5 -12.941) (float-vector 50.0 12.5 0.0) (float-vector 50.0 -12.5 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 -25.0) (float-vector 43.3013 12.5 -25.0) (float-vector 48.2963 12.5 -12.941) (float-vector 48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 -35.3553) (float-vector 35.3553 12.5 -35.3553) (float-vector 43.3013 12.5 -25.0) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 -43.3013) (float-vector 25.0 12.5 -43.3013) (float-vector 35.3553 12.5 -35.3553) (float-vector 35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 -48.2963) (float-vector 12.941 12.5 -48.2963) (float-vector 25.0 12.5 -43.3013) (float-vector 25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -5.684342e-14 -12.5 -50.0) (float-vector -5.684342e-14 12.5 -50.0) (float-vector 12.941 12.5 -48.2963) (float-vector 12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 -48.2963) (float-vector -12.941 12.5 -48.2963) (float-vector -5.684342e-14 12.5 -50.0) (float-vector -5.684342e-14 -12.5 -50.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 -43.3013) (float-vector -25.0 12.5 -43.3013) (float-vector -12.941 12.5 -48.2963) (float-vector -12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 -35.3553) (float-vector -35.3553 12.5 -35.3553) (float-vector -25.0 12.5 -43.3013) (float-vector -25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 -25.0) (float-vector -43.3013 12.5 -25.0) (float-vector -35.3553 12.5 -35.3553) (float-vector -35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 -12.941) (float-vector -48.2963 12.5 -12.941) (float-vector -43.3013 12.5 -25.0) (float-vector -43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector -50.0 -12.5 4.973799e-14) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 -12.941) (float-vector -48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 12.941) (float-vector -48.2963 12.5 12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -50.0 -12.5 4.973799e-14)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 25.0) (float-vector -43.3013 12.5 25.0) (float-vector -48.2963 12.5 12.941) (float-vector -48.2963 -12.5 12.941)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 35.3553) (float-vector -35.3553 12.5 35.3553) (float-vector -43.3013 12.5 25.0) (float-vector -43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 43.3013) (float-vector -25.0 12.5 43.3013) (float-vector -35.3553 12.5 35.3553) (float-vector -35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 48.2963) (float-vector -12.941 12.5 48.2963) (float-vector -25.0 12.5 43.3013) (float-vector -25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 2.842171e-14 -12.5 50.0) (float-vector 2.842171e-14 12.5 50.0) (float-vector -12.941 12.5 48.2963) (float-vector -12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 48.2963) (float-vector 12.941 12.5 48.2963) (float-vector 2.842171e-14 12.5 50.0) (float-vector 2.842171e-14 -12.5 50.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 43.3013) (float-vector 25.0 12.5 43.3013) (float-vector 12.941 12.5 48.2963) (float-vector 12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 35.3553) (float-vector 35.3553 12.5 35.3553) (float-vector 25.0 12.5 43.3013) (float-vector 25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 25.0) (float-vector 43.3013 12.5 25.0) (float-vector 35.3553 12.5 35.3553) (float-vector 35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 12.941) (float-vector 48.2963 12.5 12.941) (float-vector 43.3013 12.5 25.0) (float-vector 43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector 50.0 -12.5 7.105427e-15) (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 12.941) (float-vector 48.2963 -12.5 12.941)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :rear-left-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :rear-right-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 50.0 -12.5 7.105427e-15) (float-vector 48.2963 -12.5 12.941) (float-vector 43.3013 -12.5 25.0) (float-vector 35.3553 -12.5 35.3553) (float-vector 25.0 -12.5 43.3013) (float-vector 12.941 -12.5 48.2963) (float-vector 2.842171e-14 -12.5 50.0) (float-vector -12.941 -12.5 48.2963) (float-vector -25.0 -12.5 43.3013) (float-vector -35.3553 -12.5 35.3553) (float-vector -43.3013 -12.5 25.0) (float-vector -48.2963 -12.5 12.941) (float-vector -50.0 -12.5 4.973799e-14) (float-vector -48.2963 -12.5 -12.941) (float-vector -43.3013 -12.5 -25.0) (float-vector -35.3553 -12.5 -35.3553) (float-vector -25.0 -12.5 -43.3013) (float-vector -12.941 -12.5 -48.2963) (float-vector -5.684342e-14 -12.5 -50.0) (float-vector 12.941 -12.5 -48.2963) (float-vector 25.0 -12.5 -43.3013) (float-vector 35.3553 -12.5 -35.3553) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 -12.941) (float-vector 43.3013 12.5 -25.0) (float-vector 35.3553 12.5 -35.3553) (float-vector 25.0 12.5 -43.3013) (float-vector 12.941 12.5 -48.2963) (float-vector -5.684342e-14 12.5 -50.0) (float-vector -12.941 12.5 -48.2963) (float-vector -25.0 12.5 -43.3013) (float-vector -35.3553 12.5 -35.3553) (float-vector -43.3013 12.5 -25.0) (float-vector -48.2963 12.5 -12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 12.941) (float-vector -43.3013 12.5 25.0) (float-vector -35.3553 12.5 35.3553) (float-vector -25.0 12.5 43.3013) (float-vector -12.941 12.5 48.2963) (float-vector 2.842171e-14 12.5 50.0) (float-vector 12.941 12.5 48.2963) (float-vector 25.0 12.5 43.3013) (float-vector 35.3553 12.5 35.3553) (float-vector 43.3013 12.5 25.0) (float-vector 48.2963 12.5 12.941)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 48.2963 12.5 -12.941) (float-vector 50.0 12.5 0.0) (float-vector 50.0 -12.5 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 -25.0) (float-vector 43.3013 12.5 -25.0) (float-vector 48.2963 12.5 -12.941) (float-vector 48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 -35.3553) (float-vector 35.3553 12.5 -35.3553) (float-vector 43.3013 12.5 -25.0) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 -43.3013) (float-vector 25.0 12.5 -43.3013) (float-vector 35.3553 12.5 -35.3553) (float-vector 35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 -48.2963) (float-vector 12.941 12.5 -48.2963) (float-vector 25.0 12.5 -43.3013) (float-vector 25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -5.684342e-14 -12.5 -50.0) (float-vector -5.684342e-14 12.5 -50.0) (float-vector 12.941 12.5 -48.2963) (float-vector 12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 -48.2963) (float-vector -12.941 12.5 -48.2963) (float-vector -5.684342e-14 12.5 -50.0) (float-vector -5.684342e-14 -12.5 -50.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 -43.3013) (float-vector -25.0 12.5 -43.3013) (float-vector -12.941 12.5 -48.2963) (float-vector -12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 -35.3553) (float-vector -35.3553 12.5 -35.3553) (float-vector -25.0 12.5 -43.3013) (float-vector -25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 -25.0) (float-vector -43.3013 12.5 -25.0) (float-vector -35.3553 12.5 -35.3553) (float-vector -35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 -12.941) (float-vector -48.2963 12.5 -12.941) (float-vector -43.3013 12.5 -25.0) (float-vector -43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector -50.0 -12.5 4.973799e-14) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 -12.941) (float-vector -48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 12.941) (float-vector -48.2963 12.5 12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -50.0 -12.5 4.973799e-14)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 25.0) (float-vector -43.3013 12.5 25.0) (float-vector -48.2963 12.5 12.941) (float-vector -48.2963 -12.5 12.941)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 35.3553) (float-vector -35.3553 12.5 35.3553) (float-vector -43.3013 12.5 25.0) (float-vector -43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 43.3013) (float-vector -25.0 12.5 43.3013) (float-vector -35.3553 12.5 35.3553) (float-vector -35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 48.2963) (float-vector -12.941 12.5 48.2963) (float-vector -25.0 12.5 43.3013) (float-vector -25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 2.842171e-14 -12.5 50.0) (float-vector 2.842171e-14 12.5 50.0) (float-vector -12.941 12.5 48.2963) (float-vector -12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 48.2963) (float-vector 12.941 12.5 48.2963) (float-vector 2.842171e-14 12.5 50.0) (float-vector 2.842171e-14 -12.5 50.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 43.3013) (float-vector 25.0 12.5 43.3013) (float-vector 12.941 12.5 48.2963) (float-vector 12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 35.3553) (float-vector 35.3553 12.5 35.3553) (float-vector 25.0 12.5 43.3013) (float-vector 25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 25.0) (float-vector 43.3013 12.5 25.0) (float-vector 35.3553 12.5 35.3553) (float-vector 35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 12.941) (float-vector 48.2963 12.5 12.941) (float-vector 43.3013 12.5 25.0) (float-vector 43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector 50.0 -12.5 7.105427e-15) (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 12.941) (float-vector 48.2963 -12.5 12.941)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :rear-right-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :left-front-fork
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.5 16.25 0.0) (float-vector -37.5 16.25 0.0) (float-vector -37.5 16.25 -90.0) (float-vector -12.5 16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 18.75 0.0) (float-vector -12.5 18.75 0.0) (float-vector -12.5 18.75 -90.0) (float-vector -37.5 18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -12.5 16.25 0.0) (float-vector -12.5 18.75 0.0) (float-vector -37.5 18.75 0.0) (float-vector -37.5 16.25 0.0)))
         (instance face :init :vertices (list (float-vector -12.5 16.25 -90.0) (float-vector -12.5 18.75 -90.0) (float-vector -12.5 18.75 0.0) (float-vector -12.5 16.25 0.0)))
         (instance face :init :vertices (list (float-vector -37.5 16.25 -90.0) (float-vector -37.5 18.75 -90.0) (float-vector -12.5 18.75 -90.0) (float-vector -12.5 16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 16.25 0.0) (float-vector -37.5 18.75 0.0) (float-vector -37.5 18.75 -90.0) (float-vector -37.5 16.25 -90.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.5 -18.75 1.421085e-14) (float-vector -37.5 -18.75 1.421085e-14) (float-vector -37.5 -18.75 -90.0) (float-vector -12.5 -18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 -16.25 1.421085e-14) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -12.5 -16.25 -90.0) (float-vector -37.5 -16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -12.5 -18.75 1.421085e-14) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -37.5 -16.25 1.421085e-14) (float-vector -37.5 -18.75 1.421085e-14)))
         (instance face :init :vertices (list (float-vector -12.5 -18.75 -90.0) (float-vector -12.5 -16.25 -90.0) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -12.5 -18.75 1.421085e-14)))
         (instance face :init :vertices (list (float-vector -37.5 -18.75 -90.0) (float-vector -37.5 -16.25 -90.0) (float-vector -12.5 -16.25 -90.0) (float-vector -12.5 -18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 -18.75 1.421085e-14) (float-vector -37.5 -16.25 1.421085e-14) (float-vector -37.5 -16.25 -90.0) (float-vector -37.5 -18.75 -90.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :left-front-fork :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :front-left-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 50.0 -12.5 7.105427e-15) (float-vector 48.2963 -12.5 12.941) (float-vector 43.3013 -12.5 25.0) (float-vector 35.3553 -12.5 35.3553) (float-vector 25.0 -12.5 43.3013) (float-vector 12.941 -12.5 48.2963) (float-vector 0.0 -12.5 50.0) (float-vector -12.941 -12.5 48.2963) (float-vector -25.0 -12.5 43.3013) (float-vector -35.3553 -12.5 35.3553) (float-vector -43.3013 -12.5 25.0) (float-vector -48.2963 -12.5 12.941) (float-vector -50.0 -12.5 4.973799e-14) (float-vector -48.2963 -12.5 -12.941) (float-vector -43.3013 -12.5 -25.0) (float-vector -35.3553 -12.5 -35.3553) (float-vector -25.0 -12.5 -43.3013) (float-vector -12.941 -12.5 -48.2963) (float-vector -1.136868e-13 -12.5 -50.0) (float-vector 12.941 -12.5 -48.2963) (float-vector 25.0 -12.5 -43.3013) (float-vector 35.3553 -12.5 -35.3553) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 -12.941) (float-vector 43.3013 12.5 -25.0) (float-vector 35.3553 12.5 -35.3553) (float-vector 25.0 12.5 -43.3013) (float-vector 12.941 12.5 -48.2963) (float-vector -1.136868e-13 12.5 -50.0) (float-vector -12.941 12.5 -48.2963) (float-vector -25.0 12.5 -43.3013) (float-vector -35.3553 12.5 -35.3553) (float-vector -43.3013 12.5 -25.0) (float-vector -48.2963 12.5 -12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 12.941) (float-vector -43.3013 12.5 25.0) (float-vector -35.3553 12.5 35.3553) (float-vector -25.0 12.5 43.3013) (float-vector -12.941 12.5 48.2963) (float-vector 0.0 12.5 50.0) (float-vector 12.941 12.5 48.2963) (float-vector 25.0 12.5 43.3013) (float-vector 35.3553 12.5 35.3553) (float-vector 43.3013 12.5 25.0) (float-vector 48.2963 12.5 12.941)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 48.2963 12.5 -12.941) (float-vector 50.0 12.5 0.0) (float-vector 50.0 -12.5 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 -25.0) (float-vector 43.3013 12.5 -25.0) (float-vector 48.2963 12.5 -12.941) (float-vector 48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 -35.3553) (float-vector 35.3553 12.5 -35.3553) (float-vector 43.3013 12.5 -25.0) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 -43.3013) (float-vector 25.0 12.5 -43.3013) (float-vector 35.3553 12.5 -35.3553) (float-vector 35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 -48.2963) (float-vector 12.941 12.5 -48.2963) (float-vector 25.0 12.5 -43.3013) (float-vector 25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -1.136868e-13 -12.5 -50.0) (float-vector -1.136868e-13 12.5 -50.0) (float-vector 12.941 12.5 -48.2963) (float-vector 12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 -48.2963) (float-vector -12.941 12.5 -48.2963) (float-vector -1.136868e-13 12.5 -50.0) (float-vector -1.136868e-13 -12.5 -50.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 -43.3013) (float-vector -25.0 12.5 -43.3013) (float-vector -12.941 12.5 -48.2963) (float-vector -12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 -35.3553) (float-vector -35.3553 12.5 -35.3553) (float-vector -25.0 12.5 -43.3013) (float-vector -25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 -25.0) (float-vector -43.3013 12.5 -25.0) (float-vector -35.3553 12.5 -35.3553) (float-vector -35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 -12.941) (float-vector -48.2963 12.5 -12.941) (float-vector -43.3013 12.5 -25.0) (float-vector -43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector -50.0 -12.5 4.973799e-14) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 -12.941) (float-vector -48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 12.941) (float-vector -48.2963 12.5 12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -50.0 -12.5 4.973799e-14)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 25.0) (float-vector -43.3013 12.5 25.0) (float-vector -48.2963 12.5 12.941) (float-vector -48.2963 -12.5 12.941)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 35.3553) (float-vector -35.3553 12.5 35.3553) (float-vector -43.3013 12.5 25.0) (float-vector -43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 43.3013) (float-vector -25.0 12.5 43.3013) (float-vector -35.3553 12.5 35.3553) (float-vector -35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 48.2963) (float-vector -12.941 12.5 48.2963) (float-vector -25.0 12.5 43.3013) (float-vector -25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 0.0 -12.5 50.0) (float-vector 0.0 12.5 50.0) (float-vector -12.941 12.5 48.2963) (float-vector -12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 48.2963) (float-vector 12.941 12.5 48.2963) (float-vector 0.0 12.5 50.0) (float-vector 0.0 -12.5 50.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 43.3013) (float-vector 25.0 12.5 43.3013) (float-vector 12.941 12.5 48.2963) (float-vector 12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 35.3553) (float-vector 35.3553 12.5 35.3553) (float-vector 25.0 12.5 43.3013) (float-vector 25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 25.0) (float-vector 43.3013 12.5 25.0) (float-vector 35.3553 12.5 35.3553) (float-vector 35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 12.941) (float-vector 48.2963 12.5 12.941) (float-vector 43.3013 12.5 25.0) (float-vector 43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector 50.0 -12.5 7.105427e-15) (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 12.941) (float-vector 48.2963 -12.5 12.941)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :front-left-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :right-front-fork
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.5 16.25 0.0) (float-vector -37.5 16.25 0.0) (float-vector -37.5 16.25 -90.0) (float-vector -12.5 16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 18.75 0.0) (float-vector -12.5 18.75 0.0) (float-vector -12.5 18.75 -90.0) (float-vector -37.5 18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -12.5 16.25 0.0) (float-vector -12.5 18.75 0.0) (float-vector -37.5 18.75 0.0) (float-vector -37.5 16.25 0.0)))
         (instance face :init :vertices (list (float-vector -12.5 16.25 -90.0) (float-vector -12.5 18.75 -90.0) (float-vector -12.5 18.75 0.0) (float-vector -12.5 16.25 0.0)))
         (instance face :init :vertices (list (float-vector -37.5 16.25 -90.0) (float-vector -37.5 18.75 -90.0) (float-vector -12.5 18.75 -90.0) (float-vector -12.5 16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 16.25 0.0) (float-vector -37.5 18.75 0.0) (float-vector -37.5 18.75 -90.0) (float-vector -37.5 16.25 -90.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -12.5 -18.75 1.421085e-14) (float-vector -37.5 -18.75 1.421085e-14) (float-vector -37.5 -18.75 -90.0) (float-vector -12.5 -18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 -16.25 1.421085e-14) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -12.5 -16.25 -90.0) (float-vector -37.5 -16.25 -90.0)))
         (instance face :init :vertices (list (float-vector -12.5 -18.75 1.421085e-14) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -37.5 -16.25 1.421085e-14) (float-vector -37.5 -18.75 1.421085e-14)))
         (instance face :init :vertices (list (float-vector -12.5 -18.75 -90.0) (float-vector -12.5 -16.25 -90.0) (float-vector -12.5 -16.25 1.421085e-14) (float-vector -12.5 -18.75 1.421085e-14)))
         (instance face :init :vertices (list (float-vector -37.5 -18.75 -90.0) (float-vector -37.5 -16.25 -90.0) (float-vector -12.5 -16.25 -90.0) (float-vector -12.5 -18.75 -90.0)))
         (instance face :init :vertices (list (float-vector -37.5 -18.75 1.421085e-14) (float-vector -37.5 -16.25 1.421085e-14) (float-vector -37.5 -16.25 -90.0) (float-vector -37.5 -18.75 -90.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :right-front-fork :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :front-right-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 50.0 -12.5 7.105427e-15) (float-vector 48.2963 -12.5 12.941) (float-vector 43.3013 -12.5 25.0) (float-vector 35.3553 -12.5 35.3553) (float-vector 25.0 -12.5 43.3013) (float-vector 12.941 -12.5 48.2963) (float-vector 0.0 -12.5 50.0) (float-vector -12.941 -12.5 48.2963) (float-vector -25.0 -12.5 43.3013) (float-vector -35.3553 -12.5 35.3553) (float-vector -43.3013 -12.5 25.0) (float-vector -48.2963 -12.5 12.941) (float-vector -50.0 -12.5 4.973799e-14) (float-vector -48.2963 -12.5 -12.941) (float-vector -43.3013 -12.5 -25.0) (float-vector -35.3553 -12.5 -35.3553) (float-vector -25.0 -12.5 -43.3013) (float-vector -12.941 -12.5 -48.2963) (float-vector -1.136868e-13 -12.5 -50.0) (float-vector 12.941 -12.5 -48.2963) (float-vector 25.0 -12.5 -43.3013) (float-vector 35.3553 -12.5 -35.3553) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 -12.941) (float-vector 43.3013 12.5 -25.0) (float-vector 35.3553 12.5 -35.3553) (float-vector 25.0 12.5 -43.3013) (float-vector 12.941 12.5 -48.2963) (float-vector -1.136868e-13 12.5 -50.0) (float-vector -12.941 12.5 -48.2963) (float-vector -25.0 12.5 -43.3013) (float-vector -35.3553 12.5 -35.3553) (float-vector -43.3013 12.5 -25.0) (float-vector -48.2963 12.5 -12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 12.941) (float-vector -43.3013 12.5 25.0) (float-vector -35.3553 12.5 35.3553) (float-vector -25.0 12.5 43.3013) (float-vector -12.941 12.5 48.2963) (float-vector 0.0 12.5 50.0) (float-vector 12.941 12.5 48.2963) (float-vector 25.0 12.5 43.3013) (float-vector 35.3553 12.5 35.3553) (float-vector 43.3013 12.5 25.0) (float-vector 48.2963 12.5 12.941)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 -12.941) (float-vector 48.2963 12.5 -12.941) (float-vector 50.0 12.5 0.0) (float-vector 50.0 -12.5 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 -25.0) (float-vector 43.3013 12.5 -25.0) (float-vector 48.2963 12.5 -12.941) (float-vector 48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 -35.3553) (float-vector 35.3553 12.5 -35.3553) (float-vector 43.3013 12.5 -25.0) (float-vector 43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 -43.3013) (float-vector 25.0 12.5 -43.3013) (float-vector 35.3553 12.5 -35.3553) (float-vector 35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 -48.2963) (float-vector 12.941 12.5 -48.2963) (float-vector 25.0 12.5 -43.3013) (float-vector 25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -1.136868e-13 -12.5 -50.0) (float-vector -1.136868e-13 12.5 -50.0) (float-vector 12.941 12.5 -48.2963) (float-vector 12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 -48.2963) (float-vector -12.941 12.5 -48.2963) (float-vector -1.136868e-13 12.5 -50.0) (float-vector -1.136868e-13 -12.5 -50.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 -43.3013) (float-vector -25.0 12.5 -43.3013) (float-vector -12.941 12.5 -48.2963) (float-vector -12.941 -12.5 -48.2963)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 -35.3553) (float-vector -35.3553 12.5 -35.3553) (float-vector -25.0 12.5 -43.3013) (float-vector -25.0 -12.5 -43.3013)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 -25.0) (float-vector -43.3013 12.5 -25.0) (float-vector -35.3553 12.5 -35.3553) (float-vector -35.3553 -12.5 -35.3553)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 -12.941) (float-vector -48.2963 12.5 -12.941) (float-vector -43.3013 12.5 -25.0) (float-vector -43.3013 -12.5 -25.0)))
         (instance face :init :vertices (list (float-vector -50.0 -12.5 4.973799e-14) (float-vector -50.0 12.5 4.263256e-14) (float-vector -48.2963 12.5 -12.941) (float-vector -48.2963 -12.5 -12.941)))
         (instance face :init :vertices (list (float-vector -48.2963 -12.5 12.941) (float-vector -48.2963 12.5 12.941) (float-vector -50.0 12.5 4.263256e-14) (float-vector -50.0 -12.5 4.973799e-14)))
         (instance face :init :vertices (list (float-vector -43.3013 -12.5 25.0) (float-vector -43.3013 12.5 25.0) (float-vector -48.2963 12.5 12.941) (float-vector -48.2963 -12.5 12.941)))
         (instance face :init :vertices (list (float-vector -35.3553 -12.5 35.3553) (float-vector -35.3553 12.5 35.3553) (float-vector -43.3013 12.5 25.0) (float-vector -43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector -25.0 -12.5 43.3013) (float-vector -25.0 12.5 43.3013) (float-vector -35.3553 12.5 35.3553) (float-vector -35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector -12.941 -12.5 48.2963) (float-vector -12.941 12.5 48.2963) (float-vector -25.0 12.5 43.3013) (float-vector -25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 0.0 -12.5 50.0) (float-vector 0.0 12.5 50.0) (float-vector -12.941 12.5 48.2963) (float-vector -12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 12.941 -12.5 48.2963) (float-vector 12.941 12.5 48.2963) (float-vector 0.0 12.5 50.0) (float-vector 0.0 -12.5 50.0)))
         (instance face :init :vertices (list (float-vector 25.0 -12.5 43.3013) (float-vector 25.0 12.5 43.3013) (float-vector 12.941 12.5 48.2963) (float-vector 12.941 -12.5 48.2963)))
         (instance face :init :vertices (list (float-vector 35.3553 -12.5 35.3553) (float-vector 35.3553 12.5 35.3553) (float-vector 25.0 12.5 43.3013) (float-vector 25.0 -12.5 43.3013)))
         (instance face :init :vertices (list (float-vector 43.3013 -12.5 25.0) (float-vector 43.3013 12.5 25.0) (float-vector 35.3553 12.5 35.3553) (float-vector 35.3553 -12.5 35.3553)))
         (instance face :init :vertices (list (float-vector 48.2963 -12.5 12.941) (float-vector 48.2963 12.5 12.941) (float-vector 43.3013 12.5 25.0) (float-vector 43.3013 -12.5 25.0)))
         (instance face :init :vertices (list (float-vector 50.0 -12.5 7.105427e-15) (float-vector 50.0 12.5 0.0) (float-vector 48.2963 12.5 12.941) (float-vector 48.2963 -12.5 12.941)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink7 (instance bodyset-link :init (make-cascoords) :bodies bc :name :front-right-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bar
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -155.0 695.0) (float-vector 10.0 -155.0 700.0) (float-vector 8.66025 -155.0 705.0) (float-vector 5.0 -155.0 708.66) (float-vector 0.0 -155.0 710.0) (float-vector -5.0 -155.0 708.66) (float-vector -8.66025 -155.0 705.0) (float-vector -10.0 -155.0 700.0) (float-vector -8.66025 -155.0 695.0) (float-vector -5.0 -155.0 691.34) (float-vector -1.421085e-14 -155.0 690.0) (float-vector 5.0 -155.0 691.34)))
         (instance face :init :vertices (list (float-vector 10.0 155.0 700.0) (float-vector 8.66025 155.0 695.0) (float-vector 5.0 155.0 691.34) (float-vector -1.421085e-14 155.0 690.0) (float-vector -5.0 155.0 691.34) (float-vector -8.66025 155.0 695.0) (float-vector -10.0 155.0 700.0) (float-vector -8.66025 155.0 705.0) (float-vector -5.0 155.0 708.66) (float-vector 0.0 155.0 710.0) (float-vector 5.0 155.0 708.66) (float-vector 8.66025 155.0 705.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -155.0 695.0) (float-vector 8.66025 155.0 695.0) (float-vector 10.0 155.0 700.0) (float-vector 10.0 -155.0 700.0)))
         (instance face :init :vertices (list (float-vector 5.0 -155.0 691.34) (float-vector 5.0 155.0 691.34) (float-vector 8.66025 155.0 695.0) (float-vector 8.66025 -155.0 695.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 -155.0 690.0) (float-vector -1.421085e-14 155.0 690.0) (float-vector 5.0 155.0 691.34) (float-vector 5.0 -155.0 691.34)))
         (instance face :init :vertices (list (float-vector -5.0 -155.0 691.34) (float-vector -5.0 155.0 691.34) (float-vector -1.421085e-14 155.0 690.0) (float-vector -1.421085e-14 -155.0 690.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -155.0 695.0) (float-vector -8.66025 155.0 695.0) (float-vector -5.0 155.0 691.34) (float-vector -5.0 -155.0 691.34)))
         (instance face :init :vertices (list (float-vector -10.0 -155.0 700.0) (float-vector -10.0 155.0 700.0) (float-vector -8.66025 155.0 695.0) (float-vector -8.66025 -155.0 695.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -155.0 705.0) (float-vector -8.66025 155.0 705.0) (float-vector -10.0 155.0 700.0) (float-vector -10.0 -155.0 700.0)))
         (instance face :init :vertices (list (float-vector -5.0 -155.0 708.66) (float-vector -5.0 155.0 708.66) (float-vector -8.66025 155.0 705.0) (float-vector -8.66025 -155.0 705.0)))
         (instance face :init :vertices (list (float-vector 0.0 -155.0 710.0) (float-vector 0.0 155.0 710.0) (float-vector -5.0 155.0 708.66) (float-vector -5.0 -155.0 708.66)))
         (instance face :init :vertices (list (float-vector 5.0 -155.0 708.66) (float-vector 5.0 155.0 708.66) (float-vector 0.0 155.0 710.0) (float-vector 0.0 -155.0 710.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -155.0 705.0) (float-vector 8.66025 155.0 705.0) (float-vector 5.0 155.0 708.66) (float-vector 5.0 -155.0 708.66)))
         (instance face :init :vertices (list (float-vector 10.0 -155.0 700.0) (float-vector 10.0 155.0 700.0) (float-vector 8.66025 155.0 705.0) (float-vector 8.66025 -155.0 705.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -7.07107 -155.0 707.071)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -155.0 710.0) (float-vector -7.07107 -155.0 707.071) (float-vector -7.07107 -180.667 701.966) (float-vector 1.421085e-14 -181.788 704.672)))
         (instance face :init :vertices (list (float-vector -7.07107 -180.667 701.966) (float-vector -7.07107 -202.426 687.426) (float-vector 1.421085e-14 -204.497 689.497) (float-vector 1.421085e-14 -181.788 704.672)))
         (instance face :init :vertices (list (float-vector -7.07107 -202.426 687.426) (float-vector -7.07107 -216.966 665.667) (float-vector 0.0 -219.672 666.788) (float-vector 1.421085e-14 -204.497 689.497)))
         (instance face :init :vertices (list (float-vector 0.0 -225.0 640.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -216.966 665.667) (float-vector -7.07107 -222.071 640.0) (float-vector 0.0 -225.0 640.0) (float-vector 0.0 -219.672 666.788)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -155.0 710.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -155.0 707.071) (float-vector 1.421085e-14 -155.0 710.0) (float-vector 1.421085e-14 -181.788 704.672) (float-vector 7.07107 -180.667 701.966)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -204.497 689.497) (float-vector 7.07107 -202.426 687.426) (float-vector 7.07107 -180.667 701.966) (float-vector 1.421085e-14 -181.788 704.672)))
         (instance face :init :vertices (list (float-vector 0.0 -219.672 666.788) (float-vector 7.07107 -216.966 665.667) (float-vector 7.07107 -202.426 687.426) (float-vector 1.421085e-14 -204.497 689.497)))
         (instance face :init :vertices (list (float-vector 7.07107 -222.071 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 -225.0 640.0) (float-vector 7.07107 -222.071 640.0) (float-vector 7.07107 -216.966 665.667) (float-vector 0.0 -219.672 666.788)))
         (instance face :init :vertices (list (float-vector 7.07107 -155.0 707.071)))
         (instance face :init :vertices (list (float-vector 10.0 -155.0 700.0) (float-vector 7.07107 -155.0 707.071) (float-vector 7.07107 -180.667 701.966) (float-vector 10.0 -177.961 695.433)))
         (instance face :init :vertices (list (float-vector 7.07107 -202.426 687.426) (float-vector 10.0 -197.426 682.426) (float-vector 10.0 -177.961 695.433) (float-vector 7.07107 -180.667 701.966)))
         (instance face :init :vertices (list (float-vector 7.07107 -216.966 665.667) (float-vector 10.0 -210.433 662.961) (float-vector 10.0 -197.426 682.426) (float-vector 7.07107 -202.426 687.426)))
         (instance face :init :vertices (list (float-vector 10.0 -215.0 640.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -222.071 640.0) (float-vector 10.0 -215.0 640.0) (float-vector 10.0 -210.433 662.961) (float-vector 7.07107 -216.966 665.667)))
         (instance face :init :vertices (list (float-vector 10.0 -155.0 700.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -155.0 692.929) (float-vector 10.0 -155.0 700.0) (float-vector 10.0 -177.961 695.433) (float-vector 7.07107 -175.255 688.9)))
         (instance face :init :vertices (list (float-vector 10.0 -197.426 682.426) (float-vector 7.07107 -192.426 677.426) (float-vector 7.07107 -175.255 688.9) (float-vector 10.0 -177.961 695.433)))
         (instance face :init :vertices (list (float-vector 10.0 -210.433 662.961) (float-vector 7.07107 -203.9 660.255) (float-vector 7.07107 -192.426 677.426) (float-vector 10.0 -197.426 682.426)))
         (instance face :init :vertices (list (float-vector 7.07107 -207.929 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 -215.0 640.0) (float-vector 7.07107 -207.929 640.0) (float-vector 7.07107 -203.9 660.255) (float-vector 10.0 -210.433 662.961)))
         (instance face :init :vertices (list (float-vector 7.07107 -155.0 692.929)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -155.0 690.0) (float-vector 7.07107 -155.0 692.929) (float-vector 7.07107 -175.255 688.9) (float-vector 1.421085e-14 -174.134 686.194)))
         (instance face :init :vertices (list (float-vector 7.07107 -192.426 677.426) (float-vector 1.421085e-14 -190.355 675.355) (float-vector 1.421085e-14 -174.134 686.194) (float-vector 7.07107 -175.255 688.9)))
         (instance face :init :vertices (list (float-vector 7.07107 -203.9 660.255) (float-vector 0.0 -201.194 659.134) (float-vector 1.421085e-14 -190.355 675.355) (float-vector 7.07107 -192.426 677.426)))
         (instance face :init :vertices (list (float-vector 0.0 -205.0 640.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -207.929 640.0) (float-vector 0.0 -205.0 640.0) (float-vector 0.0 -201.194 659.134) (float-vector 7.07107 -203.9 660.255)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -155.0 690.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -155.0 692.929) (float-vector 1.421085e-14 -155.0 690.0) (float-vector 1.421085e-14 -174.134 686.194) (float-vector -7.07107 -175.255 688.9)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -190.355 675.355) (float-vector -7.07107 -192.426 677.426) (float-vector -7.07107 -175.255 688.9) (float-vector 1.421085e-14 -174.134 686.194)))
         (instance face :init :vertices (list (float-vector 0.0 -201.194 659.134) (float-vector -7.07107 -203.9 660.255) (float-vector -7.07107 -192.426 677.426) (float-vector 1.421085e-14 -190.355 675.355)))
         (instance face :init :vertices (list (float-vector -7.07107 -207.929 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 -205.0 640.0) (float-vector -7.07107 -207.929 640.0) (float-vector -7.07107 -203.9 660.255) (float-vector 0.0 -201.194 659.134)))
         (instance face :init :vertices (list (float-vector -7.07107 -155.0 692.929)))
         (instance face :init :vertices (list (float-vector -10.0 -155.0 700.0) (float-vector -7.07107 -155.0 692.929) (float-vector -7.07107 -175.255 688.9) (float-vector -10.0 -177.961 695.433)))
         (instance face :init :vertices (list (float-vector -7.07107 -192.426 677.426) (float-vector -10.0 -197.426 682.426) (float-vector -10.0 -177.961 695.433) (float-vector -7.07107 -175.255 688.9)))
         (instance face :init :vertices (list (float-vector -7.07107 -203.9 660.255) (float-vector -10.0 -210.433 662.961) (float-vector -10.0 -197.426 682.426) (float-vector -7.07107 -192.426 677.426)))
         (instance face :init :vertices (list (float-vector -10.0 -215.0 640.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -207.929 640.0) (float-vector -10.0 -215.0 640.0) (float-vector -10.0 -210.433 662.961) (float-vector -7.07107 -203.9 660.255)))
         (instance face :init :vertices (list (float-vector -10.0 -155.0 700.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -155.0 707.071) (float-vector -10.0 -155.0 700.0) (float-vector -10.0 -177.961 695.433) (float-vector -7.07107 -180.667 701.966)))
         (instance face :init :vertices (list (float-vector -10.0 -197.426 682.426) (float-vector -7.07107 -202.426 687.426) (float-vector -7.07107 -180.667 701.966) (float-vector -10.0 -177.961 695.433)))
         (instance face :init :vertices (list (float-vector -10.0 -210.433 662.961) (float-vector -7.07107 -216.966 665.667) (float-vector -7.07107 -202.426 687.426) (float-vector -10.0 -197.426 682.426)))
         (instance face :init :vertices (list (float-vector -7.07107 -222.071 640.0)))
         (instance face :init :vertices (list (float-vector -10.0 -215.0 640.0) (float-vector -7.07107 -222.071 640.0) (float-vector -7.07107 -216.966 665.667) (float-vector -10.0 -210.433 662.961)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 7.07107 155.0 707.071)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 155.0 710.0) (float-vector 7.07107 155.0 707.071) (float-vector 7.07107 180.667 701.966) (float-vector 1.421085e-14 181.788 704.672)))
         (instance face :init :vertices (list (float-vector 7.07107 180.667 701.966) (float-vector 7.07107 202.426 687.426) (float-vector 1.421085e-14 204.497 689.497) (float-vector 1.421085e-14 181.788 704.672)))
         (instance face :init :vertices (list (float-vector 7.07107 202.426 687.426) (float-vector 7.07107 216.966 665.667) (float-vector 0.0 219.672 666.788) (float-vector 1.421085e-14 204.497 689.497)))
         (instance face :init :vertices (list (float-vector 0.0 225.0 640.0)))
         (instance face :init :vertices (list (float-vector 7.07107 216.966 665.667) (float-vector 7.07107 222.071 640.0) (float-vector 0.0 225.0 640.0) (float-vector 0.0 219.672 666.788)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 155.0 710.0)))
         (instance face :init :vertices (list (float-vector -7.07107 155.0 707.071) (float-vector 1.421085e-14 155.0 710.0) (float-vector 1.421085e-14 181.788 704.672) (float-vector -7.07107 180.667 701.966)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 204.497 689.497) (float-vector -7.07107 202.426 687.426) (float-vector -7.07107 180.667 701.966) (float-vector 1.421085e-14 181.788 704.672)))
         (instance face :init :vertices (list (float-vector 0.0 219.672 666.788) (float-vector -7.07107 216.966 665.667) (float-vector -7.07107 202.426 687.426) (float-vector 1.421085e-14 204.497 689.497)))
         (instance face :init :vertices (list (float-vector -7.07107 222.071 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 225.0 640.0) (float-vector -7.07107 222.071 640.0) (float-vector -7.07107 216.966 665.667) (float-vector 0.0 219.672 666.788)))
         (instance face :init :vertices (list (float-vector -7.07107 155.0 707.071)))
         (instance face :init :vertices (list (float-vector -10.0 155.0 700.0) (float-vector -7.07107 155.0 707.071) (float-vector -7.07107 180.667 701.966) (float-vector -10.0 177.961 695.433)))
         (instance face :init :vertices (list (float-vector -7.07107 202.426 687.426) (float-vector -10.0 197.426 682.426) (float-vector -10.0 177.961 695.433) (float-vector -7.07107 180.667 701.966)))
         (instance face :init :vertices (list (float-vector -7.07107 216.966 665.667) (float-vector -10.0 210.433 662.961) (float-vector -10.0 197.426 682.426) (float-vector -7.07107 202.426 687.426)))
         (instance face :init :vertices (list (float-vector -10.0 215.0 640.0)))
         (instance face :init :vertices (list (float-vector -7.07107 222.071 640.0) (float-vector -10.0 215.0 640.0) (float-vector -10.0 210.433 662.961) (float-vector -7.07107 216.966 665.667)))
         (instance face :init :vertices (list (float-vector -10.0 155.0 700.0)))
         (instance face :init :vertices (list (float-vector -7.07107 155.0 692.929) (float-vector -10.0 155.0 700.0) (float-vector -10.0 177.961 695.433) (float-vector -7.07107 175.255 688.9)))
         (instance face :init :vertices (list (float-vector -10.0 197.426 682.426) (float-vector -7.07107 192.426 677.426) (float-vector -7.07107 175.255 688.9) (float-vector -10.0 177.961 695.433)))
         (instance face :init :vertices (list (float-vector -10.0 210.433 662.961) (float-vector -7.07107 203.9 660.255) (float-vector -7.07107 192.426 677.426) (float-vector -10.0 197.426 682.426)))
         (instance face :init :vertices (list (float-vector -7.07107 207.929 640.0)))
         (instance face :init :vertices (list (float-vector -10.0 215.0 640.0) (float-vector -7.07107 207.929 640.0) (float-vector -7.07107 203.9 660.255) (float-vector -10.0 210.433 662.961)))
         (instance face :init :vertices (list (float-vector -7.07107 155.0 692.929)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 155.0 690.0) (float-vector -7.07107 155.0 692.929) (float-vector -7.07107 175.255 688.9) (float-vector 1.421085e-14 174.134 686.194)))
         (instance face :init :vertices (list (float-vector -7.07107 192.426 677.426) (float-vector 0.0 190.355 675.355) (float-vector 1.421085e-14 174.134 686.194) (float-vector -7.07107 175.255 688.9)))
         (instance face :init :vertices (list (float-vector -7.07107 203.9 660.255) (float-vector 0.0 201.194 659.134) (float-vector 0.0 190.355 675.355) (float-vector -7.07107 192.426 677.426)))
         (instance face :init :vertices (list (float-vector 0.0 205.0 640.0)))
         (instance face :init :vertices (list (float-vector -7.07107 207.929 640.0) (float-vector 0.0 205.0 640.0) (float-vector 0.0 201.194 659.134) (float-vector -7.07107 203.9 660.255)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 155.0 690.0)))
         (instance face :init :vertices (list (float-vector 7.07107 155.0 692.929) (float-vector 1.421085e-14 155.0 690.0) (float-vector 1.421085e-14 174.134 686.194) (float-vector 7.07107 175.255 688.9)))
         (instance face :init :vertices (list (float-vector 0.0 190.355 675.355) (float-vector 7.07107 192.426 677.426) (float-vector 7.07107 175.255 688.9) (float-vector 1.421085e-14 174.134 686.194)))
         (instance face :init :vertices (list (float-vector 0.0 201.194 659.134) (float-vector 7.07107 203.9 660.255) (float-vector 7.07107 192.426 677.426) (float-vector 0.0 190.355 675.355)))
         (instance face :init :vertices (list (float-vector 7.07107 207.929 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 205.0 640.0) (float-vector 7.07107 207.929 640.0) (float-vector 7.07107 203.9 660.255) (float-vector 0.0 201.194 659.134)))
         (instance face :init :vertices (list (float-vector 7.07107 155.0 692.929)))
         (instance face :init :vertices (list (float-vector 10.0 155.0 700.0) (float-vector 7.07107 155.0 692.929) (float-vector 7.07107 175.255 688.9) (float-vector 10.0 177.961 695.433)))
         (instance face :init :vertices (list (float-vector 7.07107 192.426 677.426) (float-vector 10.0 197.426 682.426) (float-vector 10.0 177.961 695.433) (float-vector 7.07107 175.255 688.9)))
         (instance face :init :vertices (list (float-vector 7.07107 203.9 660.255) (float-vector 10.0 210.433 662.961) (float-vector 10.0 197.426 682.426) (float-vector 7.07107 192.426 677.426)))
         (instance face :init :vertices (list (float-vector 10.0 215.0 640.0)))
         (instance face :init :vertices (list (float-vector 7.07107 207.929 640.0) (float-vector 10.0 215.0 640.0) (float-vector 10.0 210.433 662.961) (float-vector 7.07107 203.9 660.255)))
         (instance face :init :vertices (list (float-vector 10.0 155.0 700.0)))
         (instance face :init :vertices (list (float-vector 7.07107 155.0 707.071) (float-vector 10.0 155.0 700.0) (float-vector 10.0 177.961 695.433) (float-vector 7.07107 180.667 701.966)))
         (instance face :init :vertices (list (float-vector 10.0 197.426 682.426) (float-vector 7.07107 202.426 687.426) (float-vector 7.07107 180.667 701.966) (float-vector 10.0 177.961 695.433)))
         (instance face :init :vertices (list (float-vector 10.0 210.433 662.961) (float-vector 7.07107 216.966 665.667) (float-vector 7.07107 202.426 687.426) (float-vector 10.0 197.426 682.426)))
         (instance face :init :vertices (list (float-vector 7.07107 222.071 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 215.0 640.0) (float-vector 7.07107 222.071 640.0) (float-vector 7.07107 216.966 665.667) (float-vector 10.0 210.433 662.961)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -220.0 640.0) (float-vector 10.0 -215.0 640.0) (float-vector 8.66025 -210.0 640.0) (float-vector 5.0 -206.34 640.0) (float-vector 0.0 -205.0 640.0) (float-vector -5.0 -206.34 640.0) (float-vector -8.66025 -210.0 640.0) (float-vector -10.0 -215.0 640.0) (float-vector -8.66025 -220.0 640.0) (float-vector -5.0 -223.66 640.0) (float-vector -1.421085e-14 -225.0 640.0) (float-vector 5.0 -223.66 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 -215.0 1.136868e-13) (float-vector 8.66025 -220.0 1.136868e-13) (float-vector 5.0 -223.66 1.136868e-13) (float-vector -1.421085e-14 -225.0 1.136868e-13) (float-vector -5.0 -223.66 1.136868e-13) (float-vector -8.66025 -220.0 1.136868e-13) (float-vector -10.0 -215.0 1.136868e-13) (float-vector -8.66025 -210.0 1.136868e-13) (float-vector -5.0 -206.34 1.136868e-13) (float-vector 0.0 -205.0 1.136868e-13) (float-vector 5.0 -206.34 1.136868e-13) (float-vector 8.66025 -210.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 8.66025 -220.0 640.0) (float-vector 8.66025 -220.0 1.136868e-13) (float-vector 10.0 -215.0 1.136868e-13) (float-vector 10.0 -215.0 640.0)))
         (instance face :init :vertices (list (float-vector 5.0 -223.66 640.0) (float-vector 5.0 -223.66 1.136868e-13) (float-vector 8.66025 -220.0 1.136868e-13) (float-vector 8.66025 -220.0 640.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 -225.0 640.0) (float-vector -1.421085e-14 -225.0 1.136868e-13) (float-vector 5.0 -223.66 1.136868e-13) (float-vector 5.0 -223.66 640.0)))
         (instance face :init :vertices (list (float-vector -5.0 -223.66 640.0) (float-vector -5.0 -223.66 1.136868e-13) (float-vector -1.421085e-14 -225.0 1.136868e-13) (float-vector -1.421085e-14 -225.0 640.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -220.0 640.0) (float-vector -8.66025 -220.0 1.136868e-13) (float-vector -5.0 -223.66 1.136868e-13) (float-vector -5.0 -223.66 640.0)))
         (instance face :init :vertices (list (float-vector -10.0 -215.0 640.0) (float-vector -10.0 -215.0 1.136868e-13) (float-vector -8.66025 -220.0 1.136868e-13) (float-vector -8.66025 -220.0 640.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -210.0 640.0) (float-vector -8.66025 -210.0 1.136868e-13) (float-vector -10.0 -215.0 1.136868e-13) (float-vector -10.0 -215.0 640.0)))
         (instance face :init :vertices (list (float-vector -5.0 -206.34 640.0) (float-vector -5.0 -206.34 1.136868e-13) (float-vector -8.66025 -210.0 1.136868e-13) (float-vector -8.66025 -210.0 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 -205.0 640.0) (float-vector 0.0 -205.0 1.136868e-13) (float-vector -5.0 -206.34 1.136868e-13) (float-vector -5.0 -206.34 640.0)))
         (instance face :init :vertices (list (float-vector 5.0 -206.34 640.0) (float-vector 5.0 -206.34 1.136868e-13) (float-vector 0.0 -205.0 1.136868e-13) (float-vector 0.0 -205.0 640.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -210.0 640.0) (float-vector 8.66025 -210.0 1.136868e-13) (float-vector 5.0 -206.34 1.136868e-13) (float-vector 5.0 -206.34 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 -215.0 640.0) (float-vector 10.0 -215.0 1.136868e-13) (float-vector 8.66025 -210.0 1.136868e-13) (float-vector 8.66025 -210.0 640.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 210.0 640.0) (float-vector 10.0 215.0 640.0) (float-vector 8.66025 220.0 640.0) (float-vector 5.0 223.66 640.0) (float-vector 0.0 225.0 640.0) (float-vector -5.0 223.66 640.0) (float-vector -8.66025 220.0 640.0) (float-vector -10.0 215.0 640.0) (float-vector -8.66025 210.0 640.0) (float-vector -5.0 206.34 640.0) (float-vector -1.421085e-14 205.0 640.0) (float-vector 5.0 206.34 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 215.0 0.0) (float-vector 8.66025 210.0 0.0) (float-vector 5.0 206.34 0.0) (float-vector -1.421085e-14 205.0 0.0) (float-vector -5.0 206.34 0.0) (float-vector -8.66025 210.0 0.0) (float-vector -10.0 215.0 0.0) (float-vector -8.66025 220.0 0.0) (float-vector -5.0 223.66 0.0) (float-vector 0.0 225.0 0.0) (float-vector 5.0 223.66 0.0) (float-vector 8.66025 220.0 0.0)))
         (instance face :init :vertices (list (float-vector 8.66025 210.0 640.0) (float-vector 8.66025 210.0 0.0) (float-vector 10.0 215.0 0.0) (float-vector 10.0 215.0 640.0)))
         (instance face :init :vertices (list (float-vector 5.0 206.34 640.0) (float-vector 5.0 206.34 0.0) (float-vector 8.66025 210.0 0.0) (float-vector 8.66025 210.0 640.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 205.0 640.0) (float-vector -1.421085e-14 205.0 0.0) (float-vector 5.0 206.34 0.0) (float-vector 5.0 206.34 640.0)))
         (instance face :init :vertices (list (float-vector -5.0 206.34 640.0) (float-vector -5.0 206.34 0.0) (float-vector -1.421085e-14 205.0 0.0) (float-vector -1.421085e-14 205.0 640.0)))
         (instance face :init :vertices (list (float-vector -8.66025 210.0 640.0) (float-vector -8.66025 210.0 0.0) (float-vector -5.0 206.34 0.0) (float-vector -5.0 206.34 640.0)))
         (instance face :init :vertices (list (float-vector -10.0 215.0 640.0) (float-vector -10.0 215.0 0.0) (float-vector -8.66025 210.0 0.0) (float-vector -8.66025 210.0 640.0)))
         (instance face :init :vertices (list (float-vector -8.66025 220.0 640.0) (float-vector -8.66025 220.0 0.0) (float-vector -10.0 215.0 0.0) (float-vector -10.0 215.0 640.0)))
         (instance face :init :vertices (list (float-vector -5.0 223.66 640.0) (float-vector -5.0 223.66 0.0) (float-vector -8.66025 220.0 0.0) (float-vector -8.66025 220.0 640.0)))
         (instance face :init :vertices (list (float-vector 0.0 225.0 640.0) (float-vector 0.0 225.0 0.0) (float-vector -5.0 223.66 0.0) (float-vector -5.0 223.66 640.0)))
         (instance face :init :vertices (list (float-vector 5.0 223.66 640.0) (float-vector 5.0 223.66 0.0) (float-vector 0.0 225.0 0.0) (float-vector 0.0 225.0 640.0)))
         (instance face :init :vertices (list (float-vector 8.66025 220.0 640.0) (float-vector 8.66025 220.0 0.0) (float-vector 5.0 223.66 0.0) (float-vector 5.0 223.66 640.0)))
         (instance face :init :vertices (list (float-vector 10.0 215.0 640.0) (float-vector 10.0 215.0 0.0) (float-vector 8.66025 220.0 0.0) (float-vector 8.66025 220.0 640.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bar :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink5 :newcoords (make-coords :pos (float-vector -25.0 0.0 -70.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink4 :assoc blink5)
     (send blink7 :newcoords (make-coords :pos (float-vector -25.0 0.0 -70.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink6 :assoc blink7)
     (send blink1 :newcoords (make-coords :pos (float-vector 80.0 0.0 160.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink6 :newcoords (make-coords :pos (float-vector 590.0 -147.5 120.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send blink4 :newcoords (make-coords :pos (float-vector 590.0 147.5 120.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink3 :newcoords (make-coords :pos (float-vector 135.0 -147.5 50.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink2 :newcoords (make-coords :pos (float-vector 135.0 147.5 50.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :bar
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :bar       :axis :y 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :rear-left-wheel
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :rear-left-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :rear-right-wheel
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink3 :name :rear-right-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :left-front-fork
     (setq joint3 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink4 :name :left-front-fork :axis :z 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :front-left-wheel
     (setq joint4 (instance rotational-joint :init
			     :parent-link blink4 :child-link blink5 :name :front-left-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :right-front-fork
     (setq joint5 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink6 :name :right-front-fork :axis :z 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :front-right-wheel
     (setq joint6 (instance rotational-joint :init
			     :parent-link blink6 :child-link blink7 :name :front-right-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 80.0 200.0 860.0) :rot #2f((1.0 0.0 0.0) (0.0 0.707107 -0.707107) (0.0 0.707107 0.707107)) :name ":larm"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 80.0 -200.0 860.0) :rot #2f((1.0 0.0 0.0) (0.0 0.707107 0.707107) (0.0 -0.707107 0.707107)) :name ":rarm"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 432.0 46.0 160.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":top-face"))
     (send blink0 :assoc handle2)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5 joint6))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:bar (&rest args) (forward-message-to joint0 args))
  (:rear-left-wheel (&rest args) (forward-message-to joint1 args))
  (:rear-right-wheel (&rest args) (forward-message-to joint2 args))
  (:left-front-fork (&rest args) (forward-message-to joint3 args))
  (:front-left-wheel (&rest args) (forward-message-to joint4 args))
  (:right-front-fork (&rest args) (forward-message-to joint5 args))
  (:front-right-wheel (&rest args) (forward-message-to joint6 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2) args))
  (:handle-larm (&rest args) (forward-message-to handle0 args))
  (:handle-rarm (&rest args) (forward-message-to handle1 args))
  (:handle-top-face (&rest args) (forward-message-to handle2 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun gifuplastic-720-cart (&rest args) (instance* gifuplastic-720-cart-object :init args))
;; (format *error-output* "(instance gifuplastic-720-cart-object :init) for generating model~%")
