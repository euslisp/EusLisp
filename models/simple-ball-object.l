;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass simple-ball-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod simple-ball-object
  (:init
   (&rest args &key (name "simple-ball") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :simple-ball-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 250.0 404.508 154.508) (float-vector 154.508 250.0 404.508) (float-vector 404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector 404.508 154.508 250.0) (float-vector 425.325 262.866 0.0) (float-vector 250.0 404.508 154.508)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 404.508) (float-vector 262.866 0.0 425.325) (float-vector 404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector 250.0 404.508 154.508) (float-vector 0.0 425.325 262.866) (float-vector 154.508 250.0 404.508)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 404.508) (float-vector 0.0 0.0 500.0) (float-vector -154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 404.508) (float-vector 0.0 -425.325 262.866) (float-vector 154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 500.0) (float-vector -262.866 0.0 425.325) (float-vector -154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 404.508) (float-vector 262.866 0.0 425.325) (float-vector 0.0 0.0 500.0)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 -154.508) (float-vector -250.0 404.508 154.508) (float-vector 0.0 500.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 500.0 0.0) (float-vector 0.0 425.325 -262.866) (float-vector -250.0 404.508 -154.508)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 154.508) (float-vector 0.0 425.325 262.866) (float-vector 0.0 500.0 0.0)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 -154.508) (float-vector -425.325 262.866 0.0) (float-vector -250.0 404.508 154.508)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 404.508) (float-vector -154.508 250.0 404.508) (float-vector 0.0 0.0 500.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 500.0) (float-vector 262.866 0.0 425.325) (float-vector 154.508 250.0 404.508)))
         (instance face :init :vertices (list (float-vector -154.508 250.0 404.508) (float-vector -262.866 0.0 425.325) (float-vector 0.0 0.0 500.0)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 404.508) (float-vector 0.0 425.325 262.866) (float-vector -154.508 250.0 404.508)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 154.508) (float-vector -404.508 154.508 250.0) (float-vector -154.508 250.0 404.508)))
         (instance face :init :vertices (list (float-vector -154.508 250.0 404.508) (float-vector 0.0 425.325 262.866) (float-vector -250.0 404.508 154.508)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 250.0) (float-vector -262.866 0.0 425.325) (float-vector -154.508 250.0 404.508)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 154.508) (float-vector -425.325 262.866 0.0) (float-vector -404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 250.0) (float-vector -500.0 0.0 0.0) (float-vector -404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector -404.508 -154.508 250.0) (float-vector -262.866 0.0 425.325) (float-vector -404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector -500.0 0.0 0.0) (float-vector -425.325 -262.866 0.0) (float-vector -404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 250.0) (float-vector -425.325 262.866 0.0) (float-vector -500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 -250.0) (float-vector -404.508 -154.508 -250.0) (float-vector -500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -500.0 0.0 0.0) (float-vector -425.325 262.866 0.0) (float-vector -404.508 154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -404.508 -154.508 -250.0) (float-vector -425.325 -262.866 0.0) (float-vector -500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 -250.0) (float-vector -262.866 0.0 -425.325) (float-vector -404.508 -154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 -404.508) (float-vector -250.0 -404.508 -154.508) (float-vector -404.508 -154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -404.508 -154.508 -250.0) (float-vector -262.866 0.0 -425.325) (float-vector -154.508 -250.0 -404.508)))
         (instance face :init :vertices (list (float-vector -250.0 -404.508 -154.508) (float-vector -425.325 -262.866 0.0) (float-vector -404.508 -154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 -404.508) (float-vector 0.0 -425.325 -262.866) (float-vector -250.0 -404.508 -154.508)))
         (instance face :init :vertices (list (float-vector -404.508 -154.508 250.0) (float-vector -250.0 -404.508 154.508) (float-vector -154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 404.508) (float-vector -262.866 0.0 425.325) (float-vector -404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector -250.0 -404.508 154.508) (float-vector 0.0 -425.325 262.866) (float-vector -154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector -404.508 -154.508 250.0) (float-vector -425.325 -262.866 0.0) (float-vector -250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector -250.0 -404.508 -154.508) (float-vector 0.0 -500.0 0.0) (float-vector -250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector -250.0 -404.508 154.508) (float-vector -425.325 -262.866 0.0) (float-vector -250.0 -404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 0.0 -500.0 0.0) (float-vector 0.0 -425.325 262.866) (float-vector -250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector -250.0 -404.508 -154.508) (float-vector 0.0 -425.325 -262.866) (float-vector 0.0 -500.0 0.0)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 404.508) (float-vector 250.0 -404.508 154.508) (float-vector 404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 250.0) (float-vector 262.866 0.0 425.325) (float-vector 154.508 -250.0 404.508)))
         (instance face :init :vertices (list (float-vector 250.0 -404.508 154.508) (float-vector 425.325 -262.866 0.0) (float-vector 404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 404.508) (float-vector 0.0 -425.325 262.866) (float-vector 250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector 0.0 -500.0 0.0) (float-vector 250.0 -404.508 -154.508) (float-vector 250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector 250.0 -404.508 154.508) (float-vector 0.0 -425.325 262.866) (float-vector 0.0 -500.0 0.0)))
         (instance face :init :vertices (list (float-vector 250.0 -404.508 -154.508) (float-vector 425.325 -262.866 0.0) (float-vector 250.0 -404.508 154.508)))
         (instance face :init :vertices (list (float-vector 0.0 -500.0 0.0) (float-vector 0.0 -425.325 -262.866) (float-vector 250.0 -404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 -404.508) (float-vector 404.508 -154.508 -250.0) (float-vector 250.0 -404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 250.0 -404.508 -154.508) (float-vector 0.0 -425.325 -262.866) (float-vector 154.508 -250.0 -404.508)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 -250.0) (float-vector 425.325 -262.866 0.0) (float-vector 250.0 -404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 -404.508) (float-vector 262.866 0.0 -425.325) (float-vector 404.508 -154.508 -250.0)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 250.0) (float-vector 500.0 0.0 0.0) (float-vector 404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector 404.508 154.508 250.0) (float-vector 262.866 0.0 425.325) (float-vector 404.508 -154.508 250.0)))
         (instance face :init :vertices (list (float-vector 500.0 0.0 0.0) (float-vector 425.325 262.866 0.0) (float-vector 404.508 154.508 250.0)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 250.0) (float-vector 425.325 -262.866 0.0) (float-vector 500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 -250.0) (float-vector 404.508 154.508 -250.0) (float-vector 500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 500.0 0.0 0.0) (float-vector 425.325 -262.866 0.0) (float-vector 404.508 -154.508 -250.0)))
         (instance face :init :vertices (list (float-vector 404.508 154.508 -250.0) (float-vector 425.325 262.866 0.0) (float-vector 500.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 404.508 -154.508 -250.0) (float-vector 262.866 0.0 -425.325) (float-vector 404.508 154.508 -250.0)))
         (instance face :init :vertices (list (float-vector 250.0 404.508 154.508) (float-vector 250.0 404.508 -154.508) (float-vector 0.0 500.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 500.0 0.0) (float-vector 0.0 425.325 262.866) (float-vector 250.0 404.508 154.508)))
         (instance face :init :vertices (list (float-vector 250.0 404.508 -154.508) (float-vector 0.0 425.325 -262.866) (float-vector 0.0 500.0 0.0)))
         (instance face :init :vertices (list (float-vector 250.0 404.508 154.508) (float-vector 425.325 262.866 0.0) (float-vector 250.0 404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 404.508 154.508 -250.0) (float-vector 154.508 250.0 -404.508) (float-vector 250.0 404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 250.0 404.508 -154.508) (float-vector 425.325 262.866 0.0) (float-vector 404.508 154.508 -250.0)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 -404.508) (float-vector 0.0 425.325 -262.866) (float-vector 250.0 404.508 -154.508)))
         (instance face :init :vertices (list (float-vector 404.508 154.508 -250.0) (float-vector 262.866 0.0 -425.325) (float-vector 154.508 250.0 -404.508)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 -154.508) (float-vector -154.508 250.0 -404.508) (float-vector -404.508 154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -404.508 154.508 -250.0) (float-vector -425.325 262.866 0.0) (float-vector -250.0 404.508 -154.508)))
         (instance face :init :vertices (list (float-vector -154.508 250.0 -404.508) (float-vector -262.866 0.0 -425.325) (float-vector -404.508 154.508 -250.0)))
         (instance face :init :vertices (list (float-vector -250.0 404.508 -154.508) (float-vector 0.0 425.325 -262.866) (float-vector -154.508 250.0 -404.508)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 -404.508) (float-vector 0.0 0.0 -500.0) (float-vector 154.508 -250.0 -404.508)))
         (instance face :init :vertices (list (float-vector 154.508 -250.0 -404.508) (float-vector 0.0 -425.325 -262.866) (float-vector -154.508 -250.0 -404.508)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 -500.0) (float-vector 262.866 0.0 -425.325) (float-vector 154.508 -250.0 -404.508)))
         (instance face :init :vertices (list (float-vector -154.508 -250.0 -404.508) (float-vector -262.866 0.0 -425.325) (float-vector 0.0 0.0 -500.0)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 -404.508) (float-vector 0.0 0.0 -500.0) (float-vector -154.508 250.0 -404.508)))
         (instance face :init :vertices (list (float-vector -154.508 250.0 -404.508) (float-vector 0.0 425.325 -262.866) (float-vector 154.508 250.0 -404.508)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 -500.0) (float-vector -262.866 0.0 -425.325) (float-vector -154.508 250.0 -404.508)))
         (instance face :init :vertices (list (float-vector 154.508 250.0 -404.508) (float-vector 262.866 0.0 -425.325) (float-vector 0.0 0.0 -500.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :red)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :simple-ball-bodyset2 :weight 1000 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))
  (:cameras (&rest args)
   (forward-message-to-all (list) args))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun simple-ball (&rest args) (instance* simple-ball-object :init args))
;; (format *error-output* "(instance simple-ball-object :init) for generating model~%")
