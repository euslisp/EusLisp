;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass drc-testbed-door-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1
         joint0 joint1 ))
(defmethod drc-testbed-door-object
  (:init
   (&rest args &key (name "drc-testbed-door") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root-link
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 0.0 100.0) (float-vector -700.0 0.0 100.0) (float-vector -700.0 -100.0 100.0) (float-vector 0.0 -100.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 0.0 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 -100.0 0.0) (float-vector -700.0 -100.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 100.0) (float-vector 0.0 0.0 0.0) (float-vector -700.0 0.0 0.0) (float-vector -700.0 0.0 100.0)))
         (instance face :init :vertices (list (float-vector 0.0 -100.0 100.0) (float-vector 0.0 -100.0 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 0.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 -100.0 100.0) (float-vector -700.0 -100.0 0.0) (float-vector 0.0 -100.0 0.0) (float-vector 0.0 -100.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 0.0 100.0) (float-vector -700.0 0.0 0.0) (float-vector -700.0 -100.0 0.0) (float-vector -700.0 -100.0 100.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 1000.0 100.0) (float-vector -700.0 1000.0 100.0) (float-vector -700.0 900.0 100.0) (float-vector 0.0 900.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 1000.0 0.0) (float-vector 0.0 1000.0 0.0) (float-vector 0.0 900.0 0.0) (float-vector -700.0 900.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 1000.0 100.0) (float-vector 0.0 1000.0 0.0) (float-vector -700.0 1000.0 0.0) (float-vector -700.0 1000.0 100.0)))
         (instance face :init :vertices (list (float-vector 0.0 900.0 100.0) (float-vector 0.0 900.0 0.0) (float-vector 0.0 1000.0 0.0) (float-vector 0.0 1000.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 900.0 100.0) (float-vector -700.0 900.0 0.0) (float-vector 0.0 900.0 0.0) (float-vector 0.0 900.0 100.0)))
         (instance face :init :vertices (list (float-vector -700.0 1000.0 100.0) (float-vector -700.0 1000.0 0.0) (float-vector -700.0 900.0 0.0) (float-vector -700.0 900.0 100.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root-link :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :door-panel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 15.0 900.0 1800.0) (float-vector -15.0 900.0 1800.0) (float-vector -15.0 0.0 1800.0) (float-vector 15.0 0.0 1800.0)))
         (instance face :init :vertices (list (float-vector -15.0 900.0 0.0) (float-vector 15.0 900.0 0.0) (float-vector 15.0 0.0 0.0) (float-vector -15.0 0.0 0.0)))
         (instance face :init :vertices (list (float-vector 15.0 900.0 1800.0) (float-vector 15.0 900.0 0.0) (float-vector -15.0 900.0 0.0) (float-vector -15.0 900.0 1800.0)))
         (instance face :init :vertices (list (float-vector 15.0 0.0 1800.0) (float-vector 15.0 0.0 0.0) (float-vector 15.0 900.0 0.0) (float-vector 15.0 900.0 1800.0)))
         (instance face :init :vertices (list (float-vector -15.0 0.0 1800.0) (float-vector -15.0 0.0 0.0) (float-vector 15.0 0.0 0.0) (float-vector 15.0 0.0 1800.0)))
         (instance face :init :vertices (list (float-vector -15.0 900.0 1800.0) (float-vector -15.0 900.0 0.0) (float-vector -15.0 0.0 0.0) (float-vector -15.0 0.0 1800.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray90)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :door-panel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :door-knob
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 0.0 10.0) (float-vector -60.0 0.0 10.0) (float-vector -60.0 -102.0 10.0) (float-vector 0.0 -102.0 10.0)))
         (instance face :init :vertices (list (float-vector -60.0 0.0 -10.0) (float-vector 0.0 0.0 -10.0) (float-vector 0.0 -102.0 -10.0) (float-vector -60.0 -102.0 -10.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 10.0) (float-vector 0.0 0.0 -10.0) (float-vector -60.0 0.0 -10.0) (float-vector -60.0 0.0 10.0)))
         (instance face :init :vertices (list (float-vector 0.0 -102.0 10.0) (float-vector 0.0 -102.0 -10.0) (float-vector 0.0 0.0 -10.0) (float-vector 0.0 0.0 10.0)))
         (instance face :init :vertices (list (float-vector -60.0 -102.0 10.0) (float-vector -60.0 -102.0 -10.0) (float-vector 0.0 -102.0 -10.0) (float-vector 0.0 -102.0 10.0)))
         (instance face :init :vertices (list (float-vector -60.0 0.0 10.0) (float-vector -60.0 0.0 -10.0) (float-vector -60.0 -102.0 -10.0) (float-vector -60.0 -102.0 10.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray60)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :door-knob :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 816.0 845.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 0.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :door-hinge-joint
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :door-hinge-joint :axis :-z
			     :min  -90.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :door-knob-joint
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :door-knob-joint :axis :-x
			     :min  -90.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector -60.0 816.0 845.0) :rot #2f((1.0 0.0 0.0) (0.0 2.220446e-16 -1.0) (0.0 1.0 2.220446e-16)) :name ":larm-knob-handle"))
     (send blink2 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector -60.0 816.0 845.0) :rot #2f((1.0 0.0 0.0) (0.0 2.220446e-16 1.0) (0.0 -1.0 2.220446e-16)) :name ":rarm-knob-handle"))
     (send blink2 :assoc handle1)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:door-hinge-joint (&rest args) (forward-message-to joint0 args))
  (:door-knob-joint (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1) args))
  (:handle-larm-knob-handle (&rest args) (forward-message-to handle0 args))
  (:handle-rarm-knob-handle (&rest args) (forward-message-to handle1 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun drc-testbed-door (&rest args) (instance* drc-testbed-door-object :init args))
;; (format *error-output* "(instance drc-testbed-door-object :init) for generating model~%")
