;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass drc-testbed-drill-wall-object
  :super cascaded-link
  :slots (sensors
         ))
(defmethod drc-testbed-drill-wall-object
  (:init
   (&rest args &key (name "drc-testbed-drill-wall") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root-link
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -847.064 859.135 2430.0) (float-vector -854.135 852.064 2430.0) (float-vector 1.46447 -3.53553 2430.0) (float-vector 8.53553 3.53553 2430.0)))
         (instance face :init :vertices (list (float-vector -854.135 852.064 0.0) (float-vector -847.064 859.135 0.0) (float-vector 8.53553 3.53553 0.0) (float-vector 1.46447 -3.53553 0.0)))
         (instance face :init :vertices (list (float-vector -847.064 859.135 2430.0) (float-vector -847.064 859.135 0.0) (float-vector -854.135 852.064 0.0) (float-vector -854.135 852.064 2430.0)))
         (instance face :init :vertices (list (float-vector 8.53553 3.53553 2430.0) (float-vector 8.53553 3.53553 0.0) (float-vector -847.064 859.135 0.0) (float-vector -847.064 859.135 2430.0)))
         (instance face :init :vertices (list (float-vector 1.46447 -3.53553 2430.0) (float-vector 1.46447 -3.53553 0.0) (float-vector 8.53553 3.53553 0.0) (float-vector 8.53553 3.53553 2430.0)))
         (instance face :init :vertices (list (float-vector -854.135 852.064 2430.0) (float-vector -854.135 852.064 0.0) (float-vector 1.46447 -3.53553 0.0) (float-vector 1.46447 -3.53553 2430.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 19.1421 -11.188 2430.0) (float-vector 12.0711 -4.11688 2430.0) (float-vector -129.35 -145.538 2430.0) (float-vector -122.279 -152.609 2430.0)))
         (instance face :init :vertices (list (float-vector 12.0711 -4.11688 0.0) (float-vector 19.1421 -11.188 0.0) (float-vector -122.279 -152.609 0.0) (float-vector -129.35 -145.538 0.0)))
         (instance face :init :vertices (list (float-vector 19.1421 -11.188 2430.0) (float-vector 19.1421 -11.188 0.0) (float-vector 12.0711 -4.11688 0.0) (float-vector 12.0711 -4.11688 2430.0)))
         (instance face :init :vertices (list (float-vector -122.279 -152.609 2430.0) (float-vector -122.279 -152.609 0.0) (float-vector 19.1421 -11.188 0.0) (float-vector 19.1421 -11.188 2430.0)))
         (instance face :init :vertices (list (float-vector -129.35 -145.538 2430.0) (float-vector -129.35 -145.538 0.0) (float-vector -122.279 -152.609 0.0) (float-vector -122.279 -152.609 2430.0)))
         (instance face :init :vertices (list (float-vector 12.0711 -4.11688 2430.0) (float-vector 12.0711 -4.11688 0.0) (float-vector -129.35 -145.538 0.0) (float-vector -129.35 -145.538 2430.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -108.137 -138.467 715.0) (float-vector -115.208 -131.396 715.0) (float-vector -716.249 -732.437 715.0) (float-vector -709.178 -739.508 715.0)))
         (instance face :init :vertices (list (float-vector -115.208 -131.396 -5.0) (float-vector -108.137 -138.467 -5.0) (float-vector -709.178 -739.508 -5.0) (float-vector -716.249 -732.437 -5.0)))
         (instance face :init :vertices (list (float-vector -108.137 -138.467 715.0) (float-vector -108.137 -138.467 -5.0) (float-vector -115.208 -131.396 -5.0) (float-vector -115.208 -131.396 715.0)))
         (instance face :init :vertices (list (float-vector -709.178 -739.508 715.0) (float-vector -709.178 -739.508 -5.0) (float-vector -108.137 -138.467 -5.0) (float-vector -108.137 -138.467 715.0)))
         (instance face :init :vertices (list (float-vector -716.249 -732.437 715.0) (float-vector -716.249 -732.437 -5.0) (float-vector -709.178 -739.508 -5.0) (float-vector -709.178 -739.508 715.0)))
         (instance face :init :vertices (list (float-vector -115.208 -131.396 715.0) (float-vector -115.208 -131.396 -5.0) (float-vector -716.249 -732.437 -5.0) (float-vector -716.249 -732.437 715.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -695.036 -725.366 2430.0) (float-vector -702.107 -718.295 2430.0) (float-vector -843.528 -859.716 2430.0) (float-vector -836.457 -866.787 2430.0)))
         (instance face :init :vertices (list (float-vector -702.107 -718.295 2.273737e-13) (float-vector -695.036 -725.366 2.273737e-13) (float-vector -836.457 -866.787 2.273737e-13) (float-vector -843.528 -859.716 2.273737e-13)))
         (instance face :init :vertices (list (float-vector -695.036 -725.366 2430.0) (float-vector -695.036 -725.366 2.273737e-13) (float-vector -702.107 -718.295 2.273737e-13) (float-vector -702.107 -718.295 2430.0)))
         (instance face :init :vertices (list (float-vector -836.457 -866.787 2430.0) (float-vector -836.457 -866.787 2.273737e-13) (float-vector -695.036 -725.366 2.273737e-13) (float-vector -695.036 -725.366 2430.0)))
         (instance face :init :vertices (list (float-vector -843.528 -859.716 2430.0) (float-vector -843.528 -859.716 2.273737e-13) (float-vector -836.457 -866.787 2.273737e-13) (float-vector -836.457 -866.787 2430.0)))
         (instance face :init :vertices (list (float-vector -702.107 -718.295 2430.0) (float-vector -702.107 -718.295 2.273737e-13) (float-vector -843.528 -859.716 2.273737e-13) (float-vector -843.528 -859.716 2430.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -108.137 -138.467 2435.0) (float-vector -115.208 -131.396 2435.0) (float-vector -716.249 -732.437 2435.0) (float-vector -709.178 -739.508 2435.0)))
         (instance face :init :vertices (list (float-vector -115.208 -131.396 1715.0) (float-vector -108.137 -138.467 1715.0) (float-vector -709.178 -739.508 1715.0) (float-vector -716.249 -732.437 1715.0)))
         (instance face :init :vertices (list (float-vector -108.137 -138.467 2435.0) (float-vector -108.137 -138.467 1715.0) (float-vector -115.208 -131.396 1715.0) (float-vector -115.208 -131.396 2435.0)))
         (instance face :init :vertices (list (float-vector -709.178 -739.508 2435.0) (float-vector -709.178 -739.508 1715.0) (float-vector -108.137 -138.467 1715.0) (float-vector -108.137 -138.467 2435.0)))
         (instance face :init :vertices (list (float-vector -716.249 -732.437 2435.0) (float-vector -716.249 -732.437 1715.0) (float-vector -709.178 -739.508 1715.0) (float-vector -709.178 -739.508 2435.0)))
         (instance face :init :vertices (list (float-vector -115.208 -131.396 2435.0) (float-vector -115.208 -131.396 1715.0) (float-vector -716.249 -732.437 1715.0) (float-vector -716.249 -732.437 2435.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -581.899 579.828 1030.0) (float-vector -758.675 403.051 1030.0) (float-vector -447.548 91.9239 1030.0) (float-vector -270.772 268.701 1030.0)))
         (instance face :init :vertices (list (float-vector -758.675 403.051 1020.0) (float-vector -581.899 579.828 1020.0) (float-vector -270.772 268.701 1020.0) (float-vector -447.548 91.9239 1020.0)))
         (instance face :init :vertices (list (float-vector -581.899 579.828 1030.0) (float-vector -581.899 579.828 1020.0) (float-vector -758.675 403.051 1020.0) (float-vector -758.675 403.051 1030.0)))
         (instance face :init :vertices (list (float-vector -270.772 268.701 1030.0) (float-vector -270.772 268.701 1020.0) (float-vector -581.899 579.828 1020.0) (float-vector -581.899 579.828 1030.0)))
         (instance face :init :vertices (list (float-vector -447.548 91.9239 1030.0) (float-vector -447.548 91.9239 1020.0) (float-vector -270.772 268.701 1020.0) (float-vector -270.772 268.701 1030.0)))
         (instance face :init :vertices (list (float-vector -758.675 403.051 1030.0) (float-vector -758.675 403.051 1020.0) (float-vector -447.548 91.9239 1020.0) (float-vector -447.548 91.9239 1030.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :orange3)
     (send (elt bc 1) :set-color :orange3)
     (send (elt bc 2) :set-color :orange3)
     (send (elt bc 3) :set-color :orange3)
     (send (elt bc 4) :set-color :orange3)
     (send (elt bc 5) :set-color :orange3)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root-link :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun drc-testbed-drill-wall (&rest args) (instance* drc-testbed-drill-wall-object :init args))
;; (format *error-output* "(instance drc-testbed-drill-wall-object :init) for generating model~%")
