;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass drc-testbed-button-object
  :super cascaded-link
  :slots (sensors
         joint0 ))
(defmethod drc-testbed-button-object
  (:init
   (&rest args &key (name "drc-testbed-button") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :drc-testbed-button-bodyset9
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 10.0 665.0 1695.0) (float-vector 0.0 665.0 1695.0) (float-vector 0.0 -665.0 1695.0) (float-vector 10.0 -665.0 1695.0)))
         (instance face :init :vertices (list (float-vector 0.0 665.0 105.0) (float-vector 10.0 665.0 105.0) (float-vector 10.0 -665.0 105.0) (float-vector 0.0 -665.0 105.0)))
         (instance face :init :vertices (list (float-vector 10.0 665.0 1695.0) (float-vector 10.0 665.0 105.0) (float-vector 0.0 665.0 105.0) (float-vector 0.0 665.0 1695.0)))
         (instance face :init :vertices (list (float-vector 10.0 -665.0 1695.0) (float-vector 10.0 -665.0 105.0) (float-vector 10.0 665.0 105.0) (float-vector 10.0 665.0 1695.0)))
         (instance face :init :vertices (list (float-vector 0.0 -665.0 1695.0) (float-vector 0.0 -665.0 105.0) (float-vector 10.0 -665.0 105.0) (float-vector 10.0 -665.0 1695.0)))
         (instance face :init :vertices (list (float-vector 0.0 665.0 1695.0) (float-vector 0.0 665.0 105.0) (float-vector 0.0 -665.0 105.0) (float-vector 0.0 -665.0 1695.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -130.0 100.0 1330.0) (float-vector -130.0 -100.0 1330.0) (float-vector -130.0 -100.0 1580.0) (float-vector -130.0 100.0 1580.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -130.0 95.0 1335.0) (float-vector -130.0 95.0 1575.0) (float-vector -130.0 -95.0 1575.0) (float-vector -130.0 -95.0 1335.0)))
))
         (instance face :init :vertices (list (float-vector 0.0 -100.0 1330.0) (float-vector 0.0 -100.0 1580.0) (float-vector -130.0 -100.0 1580.0) (float-vector -130.0 -100.0 1330.0)))
         (instance face :init :vertices (list (float-vector 0.0 100.0 1330.0) (float-vector 0.0 100.0 1580.0) (float-vector 0.0 -100.0 1580.0) (float-vector 0.0 -100.0 1330.0)))
         (instance face :init :vertices (list (float-vector -130.0 100.0 1580.0) (float-vector -130.0 -100.0 1580.0) (float-vector 0.0 -100.0 1580.0) (float-vector 0.0 100.0 1580.0)))
         (instance face :init :vertices (list (float-vector 0.0 100.0 1330.0) (float-vector 0.0 -100.0 1330.0) (float-vector -130.0 -100.0 1330.0) (float-vector -130.0 100.0 1330.0)))
         (instance face :init :vertices (list (float-vector -130.0 100.0 1330.0) (float-vector -130.0 100.0 1580.0) (float-vector 0.0 100.0 1580.0) (float-vector 0.0 100.0 1330.0)))
         (instance face :init :vertices (list (float-vector -130.0 -95.0 1335.0) (float-vector -130.0 -95.0 1575.0) (float-vector -85.0 -95.0 1575.0) (float-vector -85.0 -95.0 1335.0)))
         (instance face :init :vertices (list (float-vector -85.0 -95.0 1335.0) (float-vector -85.0 -95.0 1575.0) (float-vector -85.0 95.0 1575.0) (float-vector -85.0 95.0 1335.0)))
         (instance face :init :vertices (list (float-vector -85.0 95.0 1575.0) (float-vector -85.0 -95.0 1575.0) (float-vector -130.0 -95.0 1575.0) (float-vector -130.0 95.0 1575.0)))
         (instance face :init :vertices (list (float-vector -85.0 95.0 1335.0) (float-vector -85.0 95.0 1575.0) (float-vector -130.0 95.0 1575.0) (float-vector -130.0 95.0 1335.0)))
         (instance face :init :vertices (list (float-vector -130.0 95.0 1335.0) (float-vector -130.0 -95.0 1335.0) (float-vector -85.0 -95.0 1335.0) (float-vector -85.0 95.0 1335.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -145.0 -15.0 1480.98) (float-vector -145.0 0.0 1485.0) (float-vector -145.0 15.0 1480.98) (float-vector -145.0 25.9808 1470.0) (float-vector -145.0 30.0 1455.0) (float-vector -145.0 25.9808 1440.0) (float-vector -145.0 15.0 1429.02) (float-vector -145.0 2.842171e-14 1425.0) (float-vector -145.0 -15.0 1429.02) (float-vector -145.0 -25.9808 1440.0) (float-vector -145.0 -30.0 1455.0) (float-vector -145.0 -25.9808 1470.0)))
         (instance face :init :vertices (list (float-vector -105.0 0.0 1485.0) (float-vector -105.0 -15.0 1480.98) (float-vector -105.0 -25.9808 1470.0) (float-vector -105.0 -30.0 1455.0) (float-vector -105.0 -25.9808 1440.0) (float-vector -105.0 -15.0 1429.02) (float-vector -105.0 2.842171e-14 1425.0) (float-vector -105.0 15.0 1429.02) (float-vector -105.0 25.9808 1440.0) (float-vector -105.0 30.0 1455.0) (float-vector -105.0 25.9808 1470.0) (float-vector -105.0 15.0 1480.98)))
         (instance face :init :vertices (list (float-vector -145.0 -15.0 1480.98) (float-vector -105.0 -15.0 1480.98) (float-vector -105.0 0.0 1485.0) (float-vector -145.0 0.0 1485.0)))
         (instance face :init :vertices (list (float-vector -145.0 -25.9808 1470.0) (float-vector -105.0 -25.9808 1470.0) (float-vector -105.0 -15.0 1480.98) (float-vector -145.0 -15.0 1480.98)))
         (instance face :init :vertices (list (float-vector -145.0 -30.0 1455.0) (float-vector -105.0 -30.0 1455.0) (float-vector -105.0 -25.9808 1470.0) (float-vector -145.0 -25.9808 1470.0)))
         (instance face :init :vertices (list (float-vector -145.0 -25.9808 1440.0) (float-vector -105.0 -25.9808 1440.0) (float-vector -105.0 -30.0 1455.0) (float-vector -145.0 -30.0 1455.0)))
         (instance face :init :vertices (list (float-vector -145.0 -15.0 1429.02) (float-vector -105.0 -15.0 1429.02) (float-vector -105.0 -25.9808 1440.0) (float-vector -145.0 -25.9808 1440.0)))
         (instance face :init :vertices (list (float-vector -145.0 2.842171e-14 1425.0) (float-vector -105.0 2.842171e-14 1425.0) (float-vector -105.0 -15.0 1429.02) (float-vector -145.0 -15.0 1429.02)))
         (instance face :init :vertices (list (float-vector -145.0 15.0 1429.02) (float-vector -105.0 15.0 1429.02) (float-vector -105.0 2.842171e-14 1425.0) (float-vector -145.0 2.842171e-14 1425.0)))
         (instance face :init :vertices (list (float-vector -145.0 25.9808 1440.0) (float-vector -105.0 25.9808 1440.0) (float-vector -105.0 15.0 1429.02) (float-vector -145.0 15.0 1429.02)))
         (instance face :init :vertices (list (float-vector -145.0 30.0 1455.0) (float-vector -105.0 30.0 1455.0) (float-vector -105.0 25.9808 1440.0) (float-vector -145.0 25.9808 1440.0)))
         (instance face :init :vertices (list (float-vector -145.0 25.9808 1470.0) (float-vector -105.0 25.9808 1470.0) (float-vector -105.0 30.0 1455.0) (float-vector -145.0 30.0 1455.0)))
         (instance face :init :vertices (list (float-vector -145.0 15.0 1480.98) (float-vector -105.0 15.0 1480.98) (float-vector -105.0 25.9808 1470.0) (float-vector -145.0 25.9808 1470.0)))
         (instance face :init :vertices (list (float-vector -145.0 0.0 1485.0) (float-vector -105.0 0.0 1485.0) (float-vector -105.0 15.0 1480.98) (float-vector -145.0 15.0 1480.98)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :orange3)
     (send (elt bc 1) :set-color :gray60)
     (send (elt bc 2) :set-color :red)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :drc-testbed-button-bodyset9 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :drc-testbed-button-bodyset92
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 0.0 250.0) (float-vector -20.0 -1.421085e-14 250.0) (float-vector -20.0 -200.0 250.0) (float-vector 0.0 -200.0 250.0)))
         (instance face :init :vertices (list (float-vector -20.0 -1.421085e-14 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 -200.0 0.0) (float-vector -20.0 -200.0 0.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 250.0) (float-vector 0.0 0.0 0.0) (float-vector -20.0 -1.421085e-14 0.0) (float-vector -20.0 -1.421085e-14 250.0)))
         (instance face :init :vertices (list (float-vector 0.0 -200.0 250.0) (float-vector 0.0 -200.0 0.0) (float-vector 0.0 0.0 0.0) (float-vector 0.0 0.0 250.0)))
         (instance face :init :vertices (list (float-vector -20.0 -200.0 250.0) (float-vector -20.0 -200.0 0.0) (float-vector 0.0 -200.0 0.0) (float-vector 0.0 -200.0 250.0)))
         (instance face :init :vertices (list (float-vector -20.0 -1.421085e-14 250.0) (float-vector -20.0 -1.421085e-14 0.0) (float-vector -20.0 -200.0 0.0) (float-vector -20.0 -200.0 250.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray60)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :drc-testbed-button-bodyset92 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink1 :newcoords (make-coords :pos (float-vector -130.0 100.0 1330.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :hinge-joint
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :hinge-joint :axis :z 
			     :min  -90.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; init-ending 
     (setq links (list blink0 blink1))
     (setq joint-list (list joint0))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:hinge-joint (&rest args) (forward-message-to joint0 args))
  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun drc-testbed-button (&rest args) (instance* drc-testbed-button-object :init args))
;; (format *error-output* "(instance drc-testbed-button-object :init) for generating model~%")
