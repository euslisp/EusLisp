;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass eng2-7f-elevatorhall-2000x1800-elevator-call-panel-object
  :super cascaded-link
  :slots (sensors
         attention0 attention1 attention2 attention3 attention4
         ))
(defmethod eng2-7f-elevatorhall-2000x1800-elevator-call-panel-object
  (:init
   (&rest args &key (name "eng2-7f-elevatorhall-2000x1800-elevator-call-panel") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :eng2-7f-elevatorhall-2000x1800-elevator-call-panel-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 3.0 50.0 377.5) (float-vector 3.0 -50.0 377.5) (float-vector 3.0 -50.0 -377.5) (float-vector 3.0 50.0 -377.5)))
         (instance face :init :vertices (list (float-vector 0.0 -50.0 377.5) (float-vector 0.0 50.0 377.5) (float-vector 0.0 50.0 -377.5) (float-vector 0.0 -50.0 -377.5)))
         (instance face :init :vertices (list (float-vector 3.0 50.0 377.5) (float-vector 0.0 50.0 377.5) (float-vector 0.0 -50.0 377.5) (float-vector 3.0 -50.0 377.5)))
         (instance face :init :vertices (list (float-vector 3.0 50.0 -377.5) (float-vector 0.0 50.0 -377.5) (float-vector 0.0 50.0 377.5) (float-vector 3.0 50.0 377.5)))
         (instance face :init :vertices (list (float-vector 3.0 -50.0 -377.5) (float-vector 0.0 -50.0 -377.5) (float-vector 0.0 50.0 -377.5) (float-vector 3.0 50.0 -377.5)))
         (instance face :init :vertices (list (float-vector 3.0 -50.0 377.5) (float-vector 0.0 -50.0 377.5) (float-vector 0.0 -50.0 -377.5) (float-vector 3.0 -50.0 -377.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 4.0 28.0 332.5) (float-vector 4.0 -28.0 332.5) (float-vector 4.0 -28.0 177.5) (float-vector 4.0 28.0 177.5)))
         (instance face :init :vertices (list (float-vector 3.0 -28.0 332.5) (float-vector 3.0 28.0 332.5) (float-vector 3.0 28.0 177.5) (float-vector 3.0 -28.0 177.5)))
         (instance face :init :vertices (list (float-vector 4.0 28.0 332.5) (float-vector 3.0 28.0 332.5) (float-vector 3.0 -28.0 332.5) (float-vector 4.0 -28.0 332.5)))
         (instance face :init :vertices (list (float-vector 4.0 28.0 177.5) (float-vector 3.0 28.0 177.5) (float-vector 3.0 28.0 332.5) (float-vector 4.0 28.0 332.5)))
         (instance face :init :vertices (list (float-vector 4.0 -28.0 177.5) (float-vector 3.0 -28.0 177.5) (float-vector 3.0 28.0 177.5) (float-vector 4.0 28.0 177.5)))
         (instance face :init :vertices (list (float-vector 4.0 -28.0 332.5) (float-vector 3.0 -28.0 332.5) (float-vector 3.0 -28.0 177.5) (float-vector 4.0 -28.0 177.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 21.0 82.5) (float-vector 5.0 -21.0 82.5) (float-vector 5.0 -21.0 47.5) (float-vector 5.0 21.0 47.5)))
         (instance face :init :vertices (list (float-vector 3.0 -21.0 82.5) (float-vector 3.0 21.0 82.5) (float-vector 3.0 21.0 47.5) (float-vector 3.0 -21.0 47.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 82.5) (float-vector 3.0 21.0 82.5) (float-vector 3.0 -21.0 82.5) (float-vector 5.0 -21.0 82.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 47.5) (float-vector 3.0 21.0 47.5) (float-vector 3.0 21.0 82.5) (float-vector 5.0 21.0 82.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 47.5) (float-vector 3.0 -21.0 47.5) (float-vector 3.0 21.0 47.5) (float-vector 5.0 21.0 47.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 82.5) (float-vector 3.0 -21.0 82.5) (float-vector 3.0 -21.0 47.5) (float-vector 5.0 -21.0 47.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 21.0 32.5) (float-vector 5.0 -21.0 32.5) (float-vector 5.0 -21.0 -2.5) (float-vector 5.0 21.0 -2.5)))
         (instance face :init :vertices (list (float-vector 3.0 -21.0 32.5) (float-vector 3.0 21.0 32.5) (float-vector 3.0 21.0 -2.5) (float-vector 3.0 -21.0 -2.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 32.5) (float-vector 3.0 21.0 32.5) (float-vector 3.0 -21.0 32.5) (float-vector 5.0 -21.0 32.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 -2.5) (float-vector 3.0 21.0 -2.5) (float-vector 3.0 21.0 32.5) (float-vector 5.0 21.0 32.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 -2.5) (float-vector 3.0 -21.0 -2.5) (float-vector 3.0 21.0 -2.5) (float-vector 5.0 21.0 -2.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 32.5) (float-vector 3.0 -21.0 32.5) (float-vector 3.0 -21.0 -2.5) (float-vector 5.0 -21.0 -2.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 21.0 -220.5) (float-vector 5.0 -21.0 -220.5) (float-vector 5.0 -21.0 -255.5) (float-vector 5.0 21.0 -255.5)))
         (instance face :init :vertices (list (float-vector 3.0 -21.0 -220.5) (float-vector 3.0 21.0 -220.5) (float-vector 3.0 21.0 -255.5) (float-vector 3.0 -21.0 -255.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 -220.5) (float-vector 3.0 21.0 -220.5) (float-vector 3.0 -21.0 -220.5) (float-vector 5.0 -21.0 -220.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 -255.5) (float-vector 3.0 21.0 -255.5) (float-vector 3.0 21.0 -220.5) (float-vector 5.0 21.0 -220.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 -255.5) (float-vector 3.0 -21.0 -255.5) (float-vector 3.0 21.0 -255.5) (float-vector 5.0 21.0 -255.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 -220.5) (float-vector 3.0 -21.0 -220.5) (float-vector 3.0 -21.0 -255.5) (float-vector 5.0 -21.0 -255.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 5.0 21.0 -270.5) (float-vector 5.0 -21.0 -270.5) (float-vector 5.0 -21.0 -305.5) (float-vector 5.0 21.0 -305.5)))
         (instance face :init :vertices (list (float-vector 3.0 -21.0 -270.5) (float-vector 3.0 21.0 -270.5) (float-vector 3.0 21.0 -305.5) (float-vector 3.0 -21.0 -305.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 -270.5) (float-vector 3.0 21.0 -270.5) (float-vector 3.0 -21.0 -270.5) (float-vector 5.0 -21.0 -270.5)))
         (instance face :init :vertices (list (float-vector 5.0 21.0 -305.5) (float-vector 3.0 21.0 -305.5) (float-vector 3.0 21.0 -270.5) (float-vector 5.0 21.0 -270.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 -305.5) (float-vector 3.0 -21.0 -305.5) (float-vector 3.0 21.0 -305.5) (float-vector 5.0 21.0 -305.5)))
         (instance face :init :vertices (list (float-vector 5.0 -21.0 -270.5) (float-vector 3.0 -21.0 -270.5) (float-vector 3.0 -21.0 -305.5) (float-vector 5.0 -21.0 -305.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :black)
     (send (elt bc 2) :set-color :white)
     (send (elt bc 3) :set-color :white)
     (send (elt bc 4) :set-color :white)
     (send (elt bc 5) :set-color :white)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :eng2-7f-elevatorhall-2000x1800-elevator-call-panel-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :attention
     (setq attention0 (make-cascoords :pos (float-vector 0.0 -288.0 5.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "low-down-button"))
     (send blink0 :assoc attention0)
     (setq attention1 (make-cascoords :pos (float-vector 0.0 -238.0 5.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "low-up-button"))
     (send blink0 :assoc attention1)
     (setq attention2 (make-cascoords :pos (float-vector 0.0 15.0 5.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "down-button"))
     (send blink0 :assoc attention2)
     (setq attention3 (make-cascoords :pos (float-vector 0.0 65.0 5.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "up-button"))
     (send blink0 :assoc attention3)
     (setq attention4 (make-cascoords :pos (float-vector 0.0 255.0 4.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name "display-panel"))
     (send blink0 :assoc attention4)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list  attention0 attention1 attention2 attention3 attention4) args))
  (:attention-low-down-button (&rest args) (forward-message-to attention0 args))
  (:attention-low-up-button (&rest args) (forward-message-to attention1 args))
  (:attention-down-button (&rest args) (forward-message-to attention2 args))
  (:attention-up-button (&rest args) (forward-message-to attention3 args))
  (:attention-display-panel (&rest args) (forward-message-to attention4 args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun eng2-7f-elevatorhall-2000x1800-elevator-call-panel (&rest args) (instance* eng2-7f-elevatorhall-2000x1800-elevator-call-panel-object :init args))
;; (format *error-output* "(instance eng2-7f-elevatorhall-2000x1800-elevator-call-panel-object :init) for generating model~%")
