;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass room610-tray-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2 handle3 handle4 handle5
         ))
(defmethod room610-tray-object
  (:init
   (&rest args &key (name "room610-tray") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :room610-tray-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 150.0 15.0) (float-vector -200.0 150.0 15.0) (float-vector -200.0 -150.0 15.0) (float-vector 200.0 -150.0 15.0)))
         (instance face :init :vertices (list (float-vector -200.0 150.0 5.0) (float-vector 200.0 150.0 5.0) (float-vector 200.0 -150.0 5.0) (float-vector -200.0 -150.0 5.0)))
         (instance face :init :vertices (list (float-vector 200.0 150.0 15.0) (float-vector 200.0 150.0 5.0) (float-vector -200.0 150.0 5.0) (float-vector -200.0 150.0 15.0)))
         (instance face :init :vertices (list (float-vector 200.0 -150.0 15.0) (float-vector 200.0 -150.0 5.0) (float-vector 200.0 150.0 5.0) (float-vector 200.0 150.0 15.0)))
         (instance face :init :vertices (list (float-vector -200.0 -150.0 15.0) (float-vector -200.0 -150.0 5.0) (float-vector 200.0 -150.0 5.0) (float-vector 200.0 -150.0 15.0)))
         (instance face :init :vertices (list (float-vector -200.0 150.0 15.0) (float-vector -200.0 150.0 5.0) (float-vector -200.0 -150.0 5.0) (float-vector -200.0 -150.0 15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 155.0 37.5) (float-vector -200.0 155.0 37.5) (float-vector -200.0 145.0 37.5) (float-vector 200.0 145.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 155.0 7.5) (float-vector 200.0 155.0 7.5) (float-vector 200.0 145.0 7.5) (float-vector -200.0 145.0 7.5)))
         (instance face :init :vertices (list (float-vector 200.0 155.0 37.5) (float-vector 200.0 155.0 7.5) (float-vector -200.0 155.0 7.5) (float-vector -200.0 155.0 37.5)))
         (instance face :init :vertices (list (float-vector 200.0 145.0 37.5) (float-vector 200.0 145.0 7.5) (float-vector 200.0 155.0 7.5) (float-vector 200.0 155.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 145.0 37.5) (float-vector -200.0 145.0 7.5) (float-vector 200.0 145.0 7.5) (float-vector 200.0 145.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 155.0 37.5) (float-vector -200.0 155.0 7.5) (float-vector -200.0 145.0 7.5) (float-vector -200.0 145.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 200.0 -145.0 37.5) (float-vector -200.0 -145.0 37.5) (float-vector -200.0 -155.0 37.5) (float-vector 200.0 -155.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 -145.0 7.5) (float-vector 200.0 -145.0 7.5) (float-vector 200.0 -155.0 7.5) (float-vector -200.0 -155.0 7.5)))
         (instance face :init :vertices (list (float-vector 200.0 -145.0 37.5) (float-vector 200.0 -145.0 7.5) (float-vector -200.0 -145.0 7.5) (float-vector -200.0 -145.0 37.5)))
         (instance face :init :vertices (list (float-vector 200.0 -155.0 37.5) (float-vector 200.0 -155.0 7.5) (float-vector 200.0 -145.0 7.5) (float-vector 200.0 -145.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 -155.0 37.5) (float-vector -200.0 -155.0 7.5) (float-vector 200.0 -155.0 7.5) (float-vector 200.0 -155.0 37.5)))
         (instance face :init :vertices (list (float-vector -200.0 -145.0 37.5) (float-vector -200.0 -145.0 7.5) (float-vector -200.0 -155.0 7.5) (float-vector -200.0 -155.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 205.0 150.0 37.5) (float-vector 195.0 150.0 37.5) (float-vector 195.0 -150.0 37.5) (float-vector 205.0 -150.0 37.5)))
         (instance face :init :vertices (list (float-vector 195.0 150.0 7.5) (float-vector 205.0 150.0 7.5) (float-vector 205.0 -150.0 7.5) (float-vector 195.0 -150.0 7.5)))
         (instance face :init :vertices (list (float-vector 205.0 150.0 37.5) (float-vector 205.0 150.0 7.5) (float-vector 195.0 150.0 7.5) (float-vector 195.0 150.0 37.5)))
         (instance face :init :vertices (list (float-vector 205.0 -150.0 37.5) (float-vector 205.0 -150.0 7.5) (float-vector 205.0 150.0 7.5) (float-vector 205.0 150.0 37.5)))
         (instance face :init :vertices (list (float-vector 195.0 -150.0 37.5) (float-vector 195.0 -150.0 7.5) (float-vector 205.0 -150.0 7.5) (float-vector 205.0 -150.0 37.5)))
         (instance face :init :vertices (list (float-vector 195.0 150.0 37.5) (float-vector 195.0 150.0 7.5) (float-vector 195.0 -150.0 7.5) (float-vector 195.0 -150.0 37.5)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -195.0 150.0 37.5) (float-vector -205.0 150.0 37.5) (float-vector -205.0 -150.0 37.5) (float-vector -195.0 -150.0 37.5)))
         (instance face :init :vertices (list (float-vector -205.0 150.0 7.5) (float-vector -195.0 150.0 7.5) (float-vector -195.0 -150.0 7.5) (float-vector -205.0 -150.0 7.5)))
         (instance face :init :vertices (list (float-vector -195.0 150.0 37.5) (float-vector -195.0 150.0 7.5) (float-vector -205.0 150.0 7.5) (float-vector -205.0 150.0 37.5)))
         (instance face :init :vertices (list (float-vector -195.0 -150.0 37.5) (float-vector -195.0 -150.0 7.5) (float-vector -195.0 150.0 7.5) (float-vector -195.0 150.0 37.5)))
         (instance face :init :vertices (list (float-vector -205.0 -150.0 37.5) (float-vector -205.0 -150.0 7.5) (float-vector -195.0 -150.0 7.5) (float-vector -195.0 -150.0 37.5)))
         (instance face :init :vertices (list (float-vector -205.0 150.0 37.5) (float-vector -205.0 150.0 7.5) (float-vector -205.0 -150.0 7.5) (float-vector -205.0 -150.0 37.5)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :brown)
     (send (elt bc 0) :paste-texture-to-face (elt (send (elt bc 0) :faces) 0) :file "models/turtlebot_big.jpg")
     (send (elt bc 1) :set-color :brown)
     (send (elt bc 2) :set-color :brown)
     (send (elt bc 3) :set-color :brown)
     (send (elt bc 4) :set-color :brown)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :room610-tray-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 200.0 5.684342e-14 30.0) :rot #2f((0.0 -1.0 0.0) (0.0 0.0 1.0) (-1.0 0.0 0.0)) :name ":rarm-handle"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector -200.0 0.0 30.0) :rot #2f((0.0 -1.0 0.0) (0.0 0.0 1.0) (-1.0 0.0 0.0)) :name ":larm-handle"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 200.0 -120.0 30.0) :rot #2f((-0.707107 -6.106227e-16 -0.707107) (0.707107 -6.106227e-16 -0.707107) (0.0 -1.0 8.326673e-16)) :name "handle2"))
     (send blink0 :assoc handle2)
     (setq handle3 (make-cascoords :pos (float-vector 200.0 120.0 30.0) :rot #2f((-0.707107 4.440892e-16 -0.707107) (-0.707107 -3.330669e-16 0.707107) (1.110223e-16 1.0 5.551115e-16)) :name "handle3"))
     (send blink0 :assoc handle3)
     (setq handle4 (make-cascoords :pos (float-vector -200.0 -120.0 30.0) :rot #2f((0.707107 -5.551115e-16 -0.707107) (0.707107 6.106227e-16 0.707107) (0.0 -1.0 8.326673e-16)) :name "handle4"))
     (send blink0 :assoc handle4)
     (setq handle5 (make-cascoords :pos (float-vector -200.0 120.0 30.0) :rot #2f((0.707107 5.551115e-16 -0.707107) (-0.707107 6.106227e-16 -0.707107) (0.0 1.0 8.326673e-16)) :name "handle5"))
     (send blink0 :assoc handle5)

     ;; init-ending 
     (setq links (list blink0))
     (setq joint-list (list))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2 handle3 handle4 handle5) args))
  (:handle-rarm-handle (&rest args) (forward-message-to handle0 args))
  (:handle-larm-handle (&rest args) (forward-message-to handle1 args))
  (:handle-handle2 (&rest args) (forward-message-to handle2 args))
  (:handle-handle3 (&rest args) (forward-message-to handle3 args))
  (:handle-handle4 (&rest args) (forward-message-to handle4 args))
  (:handle-handle5 (&rest args) (forward-message-to handle5 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun room610-tray (&rest args) (instance* room610-tray-object :init args))
;; (format *error-output* "(instance room610-tray-object :init) for generating model~%")
