;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass gifuplastic-900-cart-object
  :super cascaded-link
  :slots (sensors
         handle0 handle1 handle2
         joint0 joint1 joint2 joint3 joint4 joint5 joint6 ))
(defmethod gifuplastic-900-cart-object
  (:init
   (&rest args &key (name "gifuplastic-900-cart") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :gifuplastic-900-cart-bodyset2
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 155.0 264.5 170.0) (float-vector 125.0 264.5 170.0) (float-vector 125.0 264.5 36.0) (float-vector 155.0 264.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 267.5 170.0) (float-vector 155.0 267.5 170.0) (float-vector 155.0 267.5 36.0) (float-vector 125.0 267.5 36.0)))
         (instance face :init :vertices (list (float-vector 155.0 264.5 170.0) (float-vector 155.0 267.5 170.0) (float-vector 125.0 267.5 170.0) (float-vector 125.0 264.5 170.0)))
         (instance face :init :vertices (list (float-vector 155.0 264.5 36.0) (float-vector 155.0 267.5 36.0) (float-vector 155.0 267.5 170.0) (float-vector 155.0 264.5 170.0)))
         (instance face :init :vertices (list (float-vector 125.0 264.5 36.0) (float-vector 125.0 267.5 36.0) (float-vector 155.0 267.5 36.0) (float-vector 155.0 264.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 264.5 170.0) (float-vector 125.0 267.5 170.0) (float-vector 125.0 267.5 36.0) (float-vector 125.0 264.5 36.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 155.0 222.5 170.0) (float-vector 125.0 222.5 170.0) (float-vector 125.0 222.5 36.0) (float-vector 155.0 222.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 225.5 170.0) (float-vector 155.0 225.5 170.0) (float-vector 155.0 225.5 36.0) (float-vector 125.0 225.5 36.0)))
         (instance face :init :vertices (list (float-vector 155.0 222.5 170.0) (float-vector 155.0 225.5 170.0) (float-vector 125.0 225.5 170.0) (float-vector 125.0 222.5 170.0)))
         (instance face :init :vertices (list (float-vector 155.0 222.5 36.0) (float-vector 155.0 225.5 36.0) (float-vector 155.0 225.5 170.0) (float-vector 155.0 222.5 170.0)))
         (instance face :init :vertices (list (float-vector 125.0 222.5 36.0) (float-vector 125.0 225.5 36.0) (float-vector 155.0 225.5 36.0) (float-vector 155.0 222.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 222.5 170.0) (float-vector 125.0 225.5 170.0) (float-vector 125.0 225.5 36.0) (float-vector 125.0 222.5 36.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 155.0 -225.5 170.0) (float-vector 125.0 -225.5 170.0) (float-vector 125.0 -225.5 36.0) (float-vector 155.0 -225.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 -222.5 170.0) (float-vector 155.0 -222.5 170.0) (float-vector 155.0 -222.5 36.0) (float-vector 125.0 -222.5 36.0)))
         (instance face :init :vertices (list (float-vector 155.0 -225.5 170.0) (float-vector 155.0 -222.5 170.0) (float-vector 125.0 -222.5 170.0) (float-vector 125.0 -225.5 170.0)))
         (instance face :init :vertices (list (float-vector 155.0 -225.5 36.0) (float-vector 155.0 -222.5 36.0) (float-vector 155.0 -222.5 170.0) (float-vector 155.0 -225.5 170.0)))
         (instance face :init :vertices (list (float-vector 125.0 -225.5 36.0) (float-vector 125.0 -222.5 36.0) (float-vector 155.0 -222.5 36.0) (float-vector 155.0 -225.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 -225.5 170.0) (float-vector 125.0 -222.5 170.0) (float-vector 125.0 -222.5 36.0) (float-vector 125.0 -225.5 36.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 155.0 -267.5 170.0) (float-vector 125.0 -267.5 170.0) (float-vector 125.0 -267.5 36.0) (float-vector 155.0 -267.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 -264.5 170.0) (float-vector 155.0 -264.5 170.0) (float-vector 155.0 -264.5 36.0) (float-vector 125.0 -264.5 36.0)))
         (instance face :init :vertices (list (float-vector 155.0 -267.5 170.0) (float-vector 155.0 -264.5 170.0) (float-vector 125.0 -264.5 170.0) (float-vector 125.0 -267.5 170.0)))
         (instance face :init :vertices (list (float-vector 155.0 -267.5 36.0) (float-vector 155.0 -264.5 36.0) (float-vector 155.0 -264.5 170.0) (float-vector 155.0 -267.5 170.0)))
         (instance face :init :vertices (list (float-vector 125.0 -267.5 36.0) (float-vector 125.0 -264.5 36.0) (float-vector 155.0 -264.5 36.0) (float-vector 155.0 -267.5 36.0)))
         (instance face :init :vertices (list (float-vector 125.0 -267.5 170.0) (float-vector 125.0 -264.5 170.0) (float-vector 125.0 -264.5 36.0) (float-vector 125.0 -267.5 36.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 900.0 300.0 220.0) (float-vector 0.0 300.0 220.0) (float-vector 0.0 -300.0 220.0) (float-vector 900.0 -300.0 220.0)))
         (instance face :init :vertices (list (float-vector 0.0 300.0 170.0) (float-vector 900.0 300.0 170.0) (float-vector 900.0 -300.0 170.0) (float-vector 0.0 -300.0 170.0)))
         (instance face :init :vertices (list (float-vector 900.0 300.0 220.0) (float-vector 900.0 300.0 170.0) (float-vector 0.0 300.0 170.0) (float-vector 0.0 300.0 220.0)))
         (instance face :init :vertices (list (float-vector 900.0 -300.0 220.0) (float-vector 900.0 -300.0 170.0) (float-vector 900.0 300.0 170.0) (float-vector 900.0 300.0 220.0)))
         (instance face :init :vertices (list (float-vector 0.0 -300.0 220.0) (float-vector 0.0 -300.0 170.0) (float-vector 900.0 -300.0 170.0) (float-vector 900.0 -300.0 220.0)))
         (instance face :init :vertices (list (float-vector 0.0 300.0 220.0) (float-vector 0.0 300.0 170.0) (float-vector 0.0 -300.0 170.0) (float-vector 0.0 -300.0 220.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :blue)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :gifuplastic-900-cart-bodyset2 :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :rear-left-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 60.0 -15.0 7.105427e-15) (float-vector 57.9555 -15.0 15.5291) (float-vector 51.9615 -15.0 30.0) (float-vector 42.4264 -15.0 42.4264) (float-vector 30.0 -15.0 51.9615) (float-vector 15.5291 -15.0 57.9555) (float-vector 2.842171e-14 -15.0 60.0) (float-vector -15.5291 -15.0 57.9555) (float-vector -30.0 -15.0 51.9615) (float-vector -42.4264 -15.0 42.4264) (float-vector -51.9615 -15.0 30.0) (float-vector -57.9555 -15.0 15.5291) (float-vector -60.0 -15.0 7.105427e-14) (float-vector -57.9555 -15.0 -15.5291) (float-vector -51.9615 -15.0 -30.0) (float-vector -42.4264 -15.0 -42.4264) (float-vector -30.0 -15.0 -51.9615) (float-vector -15.5291 -15.0 -57.9555) (float-vector -8.526513e-14 -15.0 -60.0) (float-vector 15.5291 -15.0 -57.9555) (float-vector 30.0 -15.0 -51.9615) (float-vector 42.4264 -15.0 -42.4264) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 51.9615 15.0 -30.0) (float-vector 42.4264 15.0 -42.4264) (float-vector 30.0 15.0 -51.9615) (float-vector 15.5291 15.0 -57.9555) (float-vector -8.526513e-14 15.0 -60.0) (float-vector -15.5291 15.0 -57.9555) (float-vector -30.0 15.0 -51.9615) (float-vector -42.4264 15.0 -42.4264) (float-vector -51.9615 15.0 -30.0) (float-vector -57.9555 15.0 -15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 15.5291) (float-vector -51.9615 15.0 30.0) (float-vector -42.4264 15.0 42.4264) (float-vector -30.0 15.0 51.9615) (float-vector -15.5291 15.0 57.9555) (float-vector 2.842171e-14 15.0 60.0) (float-vector 15.5291 15.0 57.9555) (float-vector 30.0 15.0 51.9615) (float-vector 42.4264 15.0 42.4264) (float-vector 51.9615 15.0 30.0) (float-vector 57.9555 15.0 15.5291)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 57.9555 15.0 -15.5291) (float-vector 60.0 15.0 0.0) (float-vector 60.0 -15.0 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 -30.0) (float-vector 51.9615 15.0 -30.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 -42.4264) (float-vector 42.4264 15.0 -42.4264) (float-vector 51.9615 15.0 -30.0) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 -51.9615) (float-vector 30.0 15.0 -51.9615) (float-vector 42.4264 15.0 -42.4264) (float-vector 42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 -57.9555) (float-vector 15.5291 15.0 -57.9555) (float-vector 30.0 15.0 -51.9615) (float-vector 30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -8.526513e-14 -15.0 -60.0) (float-vector -8.526513e-14 15.0 -60.0) (float-vector 15.5291 15.0 -57.9555) (float-vector 15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 -57.9555) (float-vector -15.5291 15.0 -57.9555) (float-vector -8.526513e-14 15.0 -60.0) (float-vector -8.526513e-14 -15.0 -60.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 -51.9615) (float-vector -30.0 15.0 -51.9615) (float-vector -15.5291 15.0 -57.9555) (float-vector -15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 -42.4264) (float-vector -42.4264 15.0 -42.4264) (float-vector -30.0 15.0 -51.9615) (float-vector -30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 -30.0) (float-vector -51.9615 15.0 -30.0) (float-vector -42.4264 15.0 -42.4264) (float-vector -42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 -15.5291) (float-vector -57.9555 15.0 -15.5291) (float-vector -51.9615 15.0 -30.0) (float-vector -51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector -60.0 -15.0 7.105427e-14) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 -15.5291) (float-vector -57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 15.5291) (float-vector -57.9555 15.0 15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -60.0 -15.0 7.105427e-14)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 30.0) (float-vector -51.9615 15.0 30.0) (float-vector -57.9555 15.0 15.5291) (float-vector -57.9555 -15.0 15.5291)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 42.4264) (float-vector -42.4264 15.0 42.4264) (float-vector -51.9615 15.0 30.0) (float-vector -51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 51.9615) (float-vector -30.0 15.0 51.9615) (float-vector -42.4264 15.0 42.4264) (float-vector -42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 57.9555) (float-vector -15.5291 15.0 57.9555) (float-vector -30.0 15.0 51.9615) (float-vector -30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 2.842171e-14 -15.0 60.0) (float-vector 2.842171e-14 15.0 60.0) (float-vector -15.5291 15.0 57.9555) (float-vector -15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 57.9555) (float-vector 15.5291 15.0 57.9555) (float-vector 2.842171e-14 15.0 60.0) (float-vector 2.842171e-14 -15.0 60.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 51.9615) (float-vector 30.0 15.0 51.9615) (float-vector 15.5291 15.0 57.9555) (float-vector 15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 42.4264) (float-vector 42.4264 15.0 42.4264) (float-vector 30.0 15.0 51.9615) (float-vector 30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 30.0) (float-vector 51.9615 15.0 30.0) (float-vector 42.4264 15.0 42.4264) (float-vector 42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 15.5291) (float-vector 57.9555 15.0 15.5291) (float-vector 51.9615 15.0 30.0) (float-vector 51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector 60.0 -15.0 7.105427e-15) (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 15.5291) (float-vector 57.9555 -15.0 15.5291)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :rear-left-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :rear-right-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 60.0 -15.0 7.105427e-15) (float-vector 57.9555 -15.0 15.5291) (float-vector 51.9615 -15.0 30.0) (float-vector 42.4264 -15.0 42.4264) (float-vector 30.0 -15.0 51.9615) (float-vector 15.5291 -15.0 57.9555) (float-vector 2.842171e-14 -15.0 60.0) (float-vector -15.5291 -15.0 57.9555) (float-vector -30.0 -15.0 51.9615) (float-vector -42.4264 -15.0 42.4264) (float-vector -51.9615 -15.0 30.0) (float-vector -57.9555 -15.0 15.5291) (float-vector -60.0 -15.0 7.105427e-14) (float-vector -57.9555 -15.0 -15.5291) (float-vector -51.9615 -15.0 -30.0) (float-vector -42.4264 -15.0 -42.4264) (float-vector -30.0 -15.0 -51.9615) (float-vector -15.5291 -15.0 -57.9555) (float-vector -8.526513e-14 -15.0 -60.0) (float-vector 15.5291 -15.0 -57.9555) (float-vector 30.0 -15.0 -51.9615) (float-vector 42.4264 -15.0 -42.4264) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 51.9615 15.0 -30.0) (float-vector 42.4264 15.0 -42.4264) (float-vector 30.0 15.0 -51.9615) (float-vector 15.5291 15.0 -57.9555) (float-vector -8.526513e-14 15.0 -60.0) (float-vector -15.5291 15.0 -57.9555) (float-vector -30.0 15.0 -51.9615) (float-vector -42.4264 15.0 -42.4264) (float-vector -51.9615 15.0 -30.0) (float-vector -57.9555 15.0 -15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 15.5291) (float-vector -51.9615 15.0 30.0) (float-vector -42.4264 15.0 42.4264) (float-vector -30.0 15.0 51.9615) (float-vector -15.5291 15.0 57.9555) (float-vector 2.842171e-14 15.0 60.0) (float-vector 15.5291 15.0 57.9555) (float-vector 30.0 15.0 51.9615) (float-vector 42.4264 15.0 42.4264) (float-vector 51.9615 15.0 30.0) (float-vector 57.9555 15.0 15.5291)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 57.9555 15.0 -15.5291) (float-vector 60.0 15.0 0.0) (float-vector 60.0 -15.0 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 -30.0) (float-vector 51.9615 15.0 -30.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 -42.4264) (float-vector 42.4264 15.0 -42.4264) (float-vector 51.9615 15.0 -30.0) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 -51.9615) (float-vector 30.0 15.0 -51.9615) (float-vector 42.4264 15.0 -42.4264) (float-vector 42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 -57.9555) (float-vector 15.5291 15.0 -57.9555) (float-vector 30.0 15.0 -51.9615) (float-vector 30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -8.526513e-14 -15.0 -60.0) (float-vector -8.526513e-14 15.0 -60.0) (float-vector 15.5291 15.0 -57.9555) (float-vector 15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 -57.9555) (float-vector -15.5291 15.0 -57.9555) (float-vector -8.526513e-14 15.0 -60.0) (float-vector -8.526513e-14 -15.0 -60.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 -51.9615) (float-vector -30.0 15.0 -51.9615) (float-vector -15.5291 15.0 -57.9555) (float-vector -15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 -42.4264) (float-vector -42.4264 15.0 -42.4264) (float-vector -30.0 15.0 -51.9615) (float-vector -30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 -30.0) (float-vector -51.9615 15.0 -30.0) (float-vector -42.4264 15.0 -42.4264) (float-vector -42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 -15.5291) (float-vector -57.9555 15.0 -15.5291) (float-vector -51.9615 15.0 -30.0) (float-vector -51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector -60.0 -15.0 7.105427e-14) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 -15.5291) (float-vector -57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 15.5291) (float-vector -57.9555 15.0 15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -60.0 -15.0 7.105427e-14)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 30.0) (float-vector -51.9615 15.0 30.0) (float-vector -57.9555 15.0 15.5291) (float-vector -57.9555 -15.0 15.5291)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 42.4264) (float-vector -42.4264 15.0 42.4264) (float-vector -51.9615 15.0 30.0) (float-vector -51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 51.9615) (float-vector -30.0 15.0 51.9615) (float-vector -42.4264 15.0 42.4264) (float-vector -42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 57.9555) (float-vector -15.5291 15.0 57.9555) (float-vector -30.0 15.0 51.9615) (float-vector -30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 2.842171e-14 -15.0 60.0) (float-vector 2.842171e-14 15.0 60.0) (float-vector -15.5291 15.0 57.9555) (float-vector -15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 57.9555) (float-vector 15.5291 15.0 57.9555) (float-vector 2.842171e-14 15.0 60.0) (float-vector 2.842171e-14 -15.0 60.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 51.9615) (float-vector 30.0 15.0 51.9615) (float-vector 15.5291 15.0 57.9555) (float-vector 15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 42.4264) (float-vector 42.4264 15.0 42.4264) (float-vector 30.0 15.0 51.9615) (float-vector 30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 30.0) (float-vector 51.9615 15.0 30.0) (float-vector 42.4264 15.0 42.4264) (float-vector 42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 15.5291) (float-vector 57.9555 15.0 15.5291) (float-vector 51.9615 15.0 30.0) (float-vector 51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector 60.0 -15.0 7.105427e-15) (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 15.5291) (float-vector 57.9555 -15.0 15.5291)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink3 (instance bodyset-link :init (make-cascoords) :bodies bc :name :rear-right-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :left-front-fork
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 19.5 0.0) (float-vector -45.0 19.5 0.0) (float-vector -45.0 19.5 -134.0) (float-vector -15.0 19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 22.5 0.0) (float-vector -15.0 22.5 0.0) (float-vector -15.0 22.5 -134.0) (float-vector -45.0 22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -15.0 19.5 0.0) (float-vector -15.0 22.5 0.0) (float-vector -45.0 22.5 0.0) (float-vector -45.0 19.5 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 19.5 -134.0) (float-vector -15.0 22.5 -134.0) (float-vector -15.0 22.5 0.0) (float-vector -15.0 19.5 0.0)))
         (instance face :init :vertices (list (float-vector -45.0 19.5 -134.0) (float-vector -45.0 22.5 -134.0) (float-vector -15.0 22.5 -134.0) (float-vector -15.0 19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 19.5 0.0) (float-vector -45.0 22.5 0.0) (float-vector -45.0 22.5 -134.0) (float-vector -45.0 19.5 -134.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 -22.5 0.0) (float-vector -45.0 -22.5 0.0) (float-vector -45.0 -22.5 -134.0) (float-vector -15.0 -22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 -19.5 0.0) (float-vector -15.0 -19.5 0.0) (float-vector -15.0 -19.5 -134.0) (float-vector -45.0 -19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -15.0 -22.5 0.0) (float-vector -15.0 -19.5 0.0) (float-vector -45.0 -19.5 0.0) (float-vector -45.0 -22.5 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 -22.5 -134.0) (float-vector -15.0 -19.5 -134.0) (float-vector -15.0 -19.5 0.0) (float-vector -15.0 -22.5 0.0)))
         (instance face :init :vertices (list (float-vector -45.0 -22.5 -134.0) (float-vector -45.0 -19.5 -134.0) (float-vector -15.0 -19.5 -134.0) (float-vector -15.0 -22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 -22.5 0.0) (float-vector -45.0 -19.5 0.0) (float-vector -45.0 -19.5 -134.0) (float-vector -45.0 -22.5 -134.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (setq blink4 (instance bodyset-link :init (make-cascoords) :bodies bc :name :left-front-fork :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :front-left-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 60.0 -15.0 7.105427e-15) (float-vector 57.9555 -15.0 15.5291) (float-vector 51.9615 -15.0 30.0) (float-vector 42.4264 -15.0 42.4264) (float-vector 30.0 -15.0 51.9615) (float-vector 15.5291 -15.0 57.9555) (float-vector 0.0 -15.0 60.0) (float-vector -15.5291 -15.0 57.9555) (float-vector -30.0 -15.0 51.9615) (float-vector -42.4264 -15.0 42.4264) (float-vector -51.9615 -15.0 30.0) (float-vector -57.9555 -15.0 15.5291) (float-vector -60.0 -15.0 7.105427e-14) (float-vector -57.9555 -15.0 -15.5291) (float-vector -51.9615 -15.0 -30.0) (float-vector -42.4264 -15.0 -42.4264) (float-vector -30.0 -15.0 -51.9615) (float-vector -15.5291 -15.0 -57.9555) (float-vector -1.136868e-13 -15.0 -60.0) (float-vector 15.5291 -15.0 -57.9555) (float-vector 30.0 -15.0 -51.9615) (float-vector 42.4264 -15.0 -42.4264) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 51.9615 15.0 -30.0) (float-vector 42.4264 15.0 -42.4264) (float-vector 30.0 15.0 -51.9615) (float-vector 15.5291 15.0 -57.9555) (float-vector -1.136868e-13 15.0 -60.0) (float-vector -15.5291 15.0 -57.9555) (float-vector -30.0 15.0 -51.9615) (float-vector -42.4264 15.0 -42.4264) (float-vector -51.9615 15.0 -30.0) (float-vector -57.9555 15.0 -15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 15.5291) (float-vector -51.9615 15.0 30.0) (float-vector -42.4264 15.0 42.4264) (float-vector -30.0 15.0 51.9615) (float-vector -15.5291 15.0 57.9555) (float-vector 0.0 15.0 60.0) (float-vector 15.5291 15.0 57.9555) (float-vector 30.0 15.0 51.9615) (float-vector 42.4264 15.0 42.4264) (float-vector 51.9615 15.0 30.0) (float-vector 57.9555 15.0 15.5291)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 57.9555 15.0 -15.5291) (float-vector 60.0 15.0 0.0) (float-vector 60.0 -15.0 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 -30.0) (float-vector 51.9615 15.0 -30.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 -42.4264) (float-vector 42.4264 15.0 -42.4264) (float-vector 51.9615 15.0 -30.0) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 -51.9615) (float-vector 30.0 15.0 -51.9615) (float-vector 42.4264 15.0 -42.4264) (float-vector 42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 -57.9555) (float-vector 15.5291 15.0 -57.9555) (float-vector 30.0 15.0 -51.9615) (float-vector 30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -1.136868e-13 -15.0 -60.0) (float-vector -1.136868e-13 15.0 -60.0) (float-vector 15.5291 15.0 -57.9555) (float-vector 15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 -57.9555) (float-vector -15.5291 15.0 -57.9555) (float-vector -1.136868e-13 15.0 -60.0) (float-vector -1.136868e-13 -15.0 -60.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 -51.9615) (float-vector -30.0 15.0 -51.9615) (float-vector -15.5291 15.0 -57.9555) (float-vector -15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 -42.4264) (float-vector -42.4264 15.0 -42.4264) (float-vector -30.0 15.0 -51.9615) (float-vector -30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 -30.0) (float-vector -51.9615 15.0 -30.0) (float-vector -42.4264 15.0 -42.4264) (float-vector -42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 -15.5291) (float-vector -57.9555 15.0 -15.5291) (float-vector -51.9615 15.0 -30.0) (float-vector -51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector -60.0 -15.0 7.105427e-14) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 -15.5291) (float-vector -57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 15.5291) (float-vector -57.9555 15.0 15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -60.0 -15.0 7.105427e-14)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 30.0) (float-vector -51.9615 15.0 30.0) (float-vector -57.9555 15.0 15.5291) (float-vector -57.9555 -15.0 15.5291)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 42.4264) (float-vector -42.4264 15.0 42.4264) (float-vector -51.9615 15.0 30.0) (float-vector -51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 51.9615) (float-vector -30.0 15.0 51.9615) (float-vector -42.4264 15.0 42.4264) (float-vector -42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 57.9555) (float-vector -15.5291 15.0 57.9555) (float-vector -30.0 15.0 51.9615) (float-vector -30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 0.0 -15.0 60.0) (float-vector 0.0 15.0 60.0) (float-vector -15.5291 15.0 57.9555) (float-vector -15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 57.9555) (float-vector 15.5291 15.0 57.9555) (float-vector 0.0 15.0 60.0) (float-vector 0.0 -15.0 60.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 51.9615) (float-vector 30.0 15.0 51.9615) (float-vector 15.5291 15.0 57.9555) (float-vector 15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 42.4264) (float-vector 42.4264 15.0 42.4264) (float-vector 30.0 15.0 51.9615) (float-vector 30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 30.0) (float-vector 51.9615 15.0 30.0) (float-vector 42.4264 15.0 42.4264) (float-vector 42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 15.5291) (float-vector 57.9555 15.0 15.5291) (float-vector 51.9615 15.0 30.0) (float-vector 51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector 60.0 -15.0 7.105427e-15) (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 15.5291) (float-vector 57.9555 -15.0 15.5291)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink5 (instance bodyset-link :init (make-cascoords) :bodies bc :name :front-left-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :right-front-fork
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 19.5 0.0) (float-vector -45.0 19.5 0.0) (float-vector -45.0 19.5 -134.0) (float-vector -15.0 19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 22.5 0.0) (float-vector -15.0 22.5 0.0) (float-vector -15.0 22.5 -134.0) (float-vector -45.0 22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -15.0 19.5 0.0) (float-vector -15.0 22.5 0.0) (float-vector -45.0 22.5 0.0) (float-vector -45.0 19.5 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 19.5 -134.0) (float-vector -15.0 22.5 -134.0) (float-vector -15.0 22.5 0.0) (float-vector -15.0 19.5 0.0)))
         (instance face :init :vertices (list (float-vector -45.0 19.5 -134.0) (float-vector -45.0 22.5 -134.0) (float-vector -15.0 22.5 -134.0) (float-vector -15.0 19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 19.5 0.0) (float-vector -45.0 22.5 0.0) (float-vector -45.0 22.5 -134.0) (float-vector -45.0 19.5 -134.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -15.0 -22.5 0.0) (float-vector -45.0 -22.5 0.0) (float-vector -45.0 -22.5 -134.0) (float-vector -15.0 -22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 -19.5 0.0) (float-vector -15.0 -19.5 0.0) (float-vector -15.0 -19.5 -134.0) (float-vector -45.0 -19.5 -134.0)))
         (instance face :init :vertices (list (float-vector -15.0 -22.5 0.0) (float-vector -15.0 -19.5 0.0) (float-vector -45.0 -19.5 0.0) (float-vector -45.0 -22.5 0.0)))
         (instance face :init :vertices (list (float-vector -15.0 -22.5 -134.0) (float-vector -15.0 -19.5 -134.0) (float-vector -15.0 -19.5 0.0) (float-vector -15.0 -22.5 0.0)))
         (instance face :init :vertices (list (float-vector -45.0 -22.5 -134.0) (float-vector -45.0 -19.5 -134.0) (float-vector -15.0 -19.5 -134.0) (float-vector -15.0 -22.5 -134.0)))
         (instance face :init :vertices (list (float-vector -45.0 -22.5 0.0) (float-vector -45.0 -19.5 0.0) (float-vector -45.0 -19.5 -134.0) (float-vector -45.0 -22.5 -134.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (setq blink6 (instance bodyset-link :init (make-cascoords) :bodies bc :name :right-front-fork :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :front-right-wheel
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 60.0 -15.0 7.105427e-15) (float-vector 57.9555 -15.0 15.5291) (float-vector 51.9615 -15.0 30.0) (float-vector 42.4264 -15.0 42.4264) (float-vector 30.0 -15.0 51.9615) (float-vector 15.5291 -15.0 57.9555) (float-vector 0.0 -15.0 60.0) (float-vector -15.5291 -15.0 57.9555) (float-vector -30.0 -15.0 51.9615) (float-vector -42.4264 -15.0 42.4264) (float-vector -51.9615 -15.0 30.0) (float-vector -57.9555 -15.0 15.5291) (float-vector -60.0 -15.0 7.105427e-14) (float-vector -57.9555 -15.0 -15.5291) (float-vector -51.9615 -15.0 -30.0) (float-vector -42.4264 -15.0 -42.4264) (float-vector -30.0 -15.0 -51.9615) (float-vector -15.5291 -15.0 -57.9555) (float-vector -1.136868e-13 -15.0 -60.0) (float-vector 15.5291 -15.0 -57.9555) (float-vector 30.0 -15.0 -51.9615) (float-vector 42.4264 -15.0 -42.4264) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 51.9615 15.0 -30.0) (float-vector 42.4264 15.0 -42.4264) (float-vector 30.0 15.0 -51.9615) (float-vector 15.5291 15.0 -57.9555) (float-vector -1.136868e-13 15.0 -60.0) (float-vector -15.5291 15.0 -57.9555) (float-vector -30.0 15.0 -51.9615) (float-vector -42.4264 15.0 -42.4264) (float-vector -51.9615 15.0 -30.0) (float-vector -57.9555 15.0 -15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 15.5291) (float-vector -51.9615 15.0 30.0) (float-vector -42.4264 15.0 42.4264) (float-vector -30.0 15.0 51.9615) (float-vector -15.5291 15.0 57.9555) (float-vector 0.0 15.0 60.0) (float-vector 15.5291 15.0 57.9555) (float-vector 30.0 15.0 51.9615) (float-vector 42.4264 15.0 42.4264) (float-vector 51.9615 15.0 30.0) (float-vector 57.9555 15.0 15.5291)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 -15.5291) (float-vector 57.9555 15.0 -15.5291) (float-vector 60.0 15.0 0.0) (float-vector 60.0 -15.0 7.105427e-15)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 -30.0) (float-vector 51.9615 15.0 -30.0) (float-vector 57.9555 15.0 -15.5291) (float-vector 57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 -42.4264) (float-vector 42.4264 15.0 -42.4264) (float-vector 51.9615 15.0 -30.0) (float-vector 51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 -51.9615) (float-vector 30.0 15.0 -51.9615) (float-vector 42.4264 15.0 -42.4264) (float-vector 42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 -57.9555) (float-vector 15.5291 15.0 -57.9555) (float-vector 30.0 15.0 -51.9615) (float-vector 30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -1.136868e-13 -15.0 -60.0) (float-vector -1.136868e-13 15.0 -60.0) (float-vector 15.5291 15.0 -57.9555) (float-vector 15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 -57.9555) (float-vector -15.5291 15.0 -57.9555) (float-vector -1.136868e-13 15.0 -60.0) (float-vector -1.136868e-13 -15.0 -60.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 -51.9615) (float-vector -30.0 15.0 -51.9615) (float-vector -15.5291 15.0 -57.9555) (float-vector -15.5291 -15.0 -57.9555)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 -42.4264) (float-vector -42.4264 15.0 -42.4264) (float-vector -30.0 15.0 -51.9615) (float-vector -30.0 -15.0 -51.9615)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 -30.0) (float-vector -51.9615 15.0 -30.0) (float-vector -42.4264 15.0 -42.4264) (float-vector -42.4264 -15.0 -42.4264)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 -15.5291) (float-vector -57.9555 15.0 -15.5291) (float-vector -51.9615 15.0 -30.0) (float-vector -51.9615 -15.0 -30.0)))
         (instance face :init :vertices (list (float-vector -60.0 -15.0 7.105427e-14) (float-vector -60.0 15.0 6.394885e-14) (float-vector -57.9555 15.0 -15.5291) (float-vector -57.9555 -15.0 -15.5291)))
         (instance face :init :vertices (list (float-vector -57.9555 -15.0 15.5291) (float-vector -57.9555 15.0 15.5291) (float-vector -60.0 15.0 6.394885e-14) (float-vector -60.0 -15.0 7.105427e-14)))
         (instance face :init :vertices (list (float-vector -51.9615 -15.0 30.0) (float-vector -51.9615 15.0 30.0) (float-vector -57.9555 15.0 15.5291) (float-vector -57.9555 -15.0 15.5291)))
         (instance face :init :vertices (list (float-vector -42.4264 -15.0 42.4264) (float-vector -42.4264 15.0 42.4264) (float-vector -51.9615 15.0 30.0) (float-vector -51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector -30.0 -15.0 51.9615) (float-vector -30.0 15.0 51.9615) (float-vector -42.4264 15.0 42.4264) (float-vector -42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector -15.5291 -15.0 57.9555) (float-vector -15.5291 15.0 57.9555) (float-vector -30.0 15.0 51.9615) (float-vector -30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 0.0 -15.0 60.0) (float-vector 0.0 15.0 60.0) (float-vector -15.5291 15.0 57.9555) (float-vector -15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 15.5291 -15.0 57.9555) (float-vector 15.5291 15.0 57.9555) (float-vector 0.0 15.0 60.0) (float-vector 0.0 -15.0 60.0)))
         (instance face :init :vertices (list (float-vector 30.0 -15.0 51.9615) (float-vector 30.0 15.0 51.9615) (float-vector 15.5291 15.0 57.9555) (float-vector 15.5291 -15.0 57.9555)))
         (instance face :init :vertices (list (float-vector 42.4264 -15.0 42.4264) (float-vector 42.4264 15.0 42.4264) (float-vector 30.0 15.0 51.9615) (float-vector 30.0 -15.0 51.9615)))
         (instance face :init :vertices (list (float-vector 51.9615 -15.0 30.0) (float-vector 51.9615 15.0 30.0) (float-vector 42.4264 15.0 42.4264) (float-vector 42.4264 -15.0 42.4264)))
         (instance face :init :vertices (list (float-vector 57.9555 -15.0 15.5291) (float-vector 57.9555 15.0 15.5291) (float-vector 51.9615 15.0 30.0) (float-vector 51.9615 -15.0 30.0)))
         (instance face :init :vertices (list (float-vector 60.0 -15.0 7.105427e-15) (float-vector 60.0 15.0 0.0) (float-vector 57.9555 15.0 15.5291) (float-vector 57.9555 -15.0 15.5291)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (setq blink7 (instance bodyset-link :init (make-cascoords) :bodies bc :name :front-right-wheel :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :bar
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -220.0 665.0) (float-vector 10.0 -220.0 670.0) (float-vector 8.66025 -220.0 675.0) (float-vector 5.0 -220.0 678.66) (float-vector 0.0 -220.0 680.0) (float-vector -5.0 -220.0 678.66) (float-vector -8.66025 -220.0 675.0) (float-vector -10.0 -220.0 670.0) (float-vector -8.66025 -220.0 665.0) (float-vector -5.0 -220.0 661.34) (float-vector -1.421085e-14 -220.0 660.0) (float-vector 5.0 -220.0 661.34)))
         (instance face :init :vertices (list (float-vector 10.0 220.0 670.0) (float-vector 8.66025 220.0 665.0) (float-vector 5.0 220.0 661.34) (float-vector -1.421085e-14 220.0 660.0) (float-vector -5.0 220.0 661.34) (float-vector -8.66025 220.0 665.0) (float-vector -10.0 220.0 670.0) (float-vector -8.66025 220.0 675.0) (float-vector -5.0 220.0 678.66) (float-vector 0.0 220.0 680.0) (float-vector 5.0 220.0 678.66) (float-vector 8.66025 220.0 675.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -220.0 665.0) (float-vector 8.66025 220.0 665.0) (float-vector 10.0 220.0 670.0) (float-vector 10.0 -220.0 670.0)))
         (instance face :init :vertices (list (float-vector 5.0 -220.0 661.34) (float-vector 5.0 220.0 661.34) (float-vector 8.66025 220.0 665.0) (float-vector 8.66025 -220.0 665.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 -220.0 660.0) (float-vector -1.421085e-14 220.0 660.0) (float-vector 5.0 220.0 661.34) (float-vector 5.0 -220.0 661.34)))
         (instance face :init :vertices (list (float-vector -5.0 -220.0 661.34) (float-vector -5.0 220.0 661.34) (float-vector -1.421085e-14 220.0 660.0) (float-vector -1.421085e-14 -220.0 660.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -220.0 665.0) (float-vector -8.66025 220.0 665.0) (float-vector -5.0 220.0 661.34) (float-vector -5.0 -220.0 661.34)))
         (instance face :init :vertices (list (float-vector -10.0 -220.0 670.0) (float-vector -10.0 220.0 670.0) (float-vector -8.66025 220.0 665.0) (float-vector -8.66025 -220.0 665.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -220.0 675.0) (float-vector -8.66025 220.0 675.0) (float-vector -10.0 220.0 670.0) (float-vector -10.0 -220.0 670.0)))
         (instance face :init :vertices (list (float-vector -5.0 -220.0 678.66) (float-vector -5.0 220.0 678.66) (float-vector -8.66025 220.0 675.0) (float-vector -8.66025 -220.0 675.0)))
         (instance face :init :vertices (list (float-vector 0.0 -220.0 680.0) (float-vector 0.0 220.0 680.0) (float-vector -5.0 220.0 678.66) (float-vector -5.0 -220.0 678.66)))
         (instance face :init :vertices (list (float-vector 5.0 -220.0 678.66) (float-vector 5.0 220.0 678.66) (float-vector 0.0 220.0 680.0) (float-vector 0.0 -220.0 680.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -220.0 675.0) (float-vector 8.66025 220.0 675.0) (float-vector 5.0 220.0 678.66) (float-vector 5.0 -220.0 678.66)))
         (instance face :init :vertices (list (float-vector 10.0 -220.0 670.0) (float-vector 10.0 220.0 670.0) (float-vector 8.66025 220.0 675.0) (float-vector 8.66025 -220.0 675.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -7.07107 -220.0 677.071)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -220.0 680.0) (float-vector -7.07107 -220.0 677.071) (float-vector -7.07107 -245.667 671.966) (float-vector 1.421085e-14 -246.788 674.672)))
         (instance face :init :vertices (list (float-vector -7.07107 -245.667 671.966) (float-vector -7.07107 -267.426 657.426) (float-vector 1.421085e-14 -269.497 659.497) (float-vector 1.421085e-14 -246.788 674.672)))
         (instance face :init :vertices (list (float-vector -7.07107 -267.426 657.426) (float-vector -7.07107 -281.966 635.667) (float-vector 0.0 -284.672 636.788) (float-vector 1.421085e-14 -269.497 659.497)))
         (instance face :init :vertices (list (float-vector 0.0 -290.0 610.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -281.966 635.667) (float-vector -7.07107 -287.071 610.0) (float-vector 0.0 -290.0 610.0) (float-vector 0.0 -284.672 636.788)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -220.0 680.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -220.0 677.071) (float-vector 1.421085e-14 -220.0 680.0) (float-vector 1.421085e-14 -246.788 674.672) (float-vector 7.07107 -245.667 671.966)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -269.497 659.497) (float-vector 7.07107 -267.426 657.426) (float-vector 7.07107 -245.667 671.966) (float-vector 1.421085e-14 -246.788 674.672)))
         (instance face :init :vertices (list (float-vector 0.0 -284.672 636.788) (float-vector 7.07107 -281.966 635.667) (float-vector 7.07107 -267.426 657.426) (float-vector 1.421085e-14 -269.497 659.497)))
         (instance face :init :vertices (list (float-vector 7.07107 -287.071 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 -290.0 610.0) (float-vector 7.07107 -287.071 610.0) (float-vector 7.07107 -281.966 635.667) (float-vector 0.0 -284.672 636.788)))
         (instance face :init :vertices (list (float-vector 7.07107 -220.0 677.071)))
         (instance face :init :vertices (list (float-vector 10.0 -220.0 670.0) (float-vector 7.07107 -220.0 677.071) (float-vector 7.07107 -245.667 671.966) (float-vector 10.0 -242.961 665.433)))
         (instance face :init :vertices (list (float-vector 7.07107 -267.426 657.426) (float-vector 10.0 -262.426 652.426) (float-vector 10.0 -242.961 665.433) (float-vector 7.07107 -245.667 671.966)))
         (instance face :init :vertices (list (float-vector 7.07107 -281.966 635.667) (float-vector 10.0 -275.433 632.961) (float-vector 10.0 -262.426 652.426) (float-vector 7.07107 -267.426 657.426)))
         (instance face :init :vertices (list (float-vector 10.0 -280.0 610.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -287.071 610.0) (float-vector 10.0 -280.0 610.0) (float-vector 10.0 -275.433 632.961) (float-vector 7.07107 -281.966 635.667)))
         (instance face :init :vertices (list (float-vector 10.0 -220.0 670.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -220.0 662.929) (float-vector 10.0 -220.0 670.0) (float-vector 10.0 -242.961 665.433) (float-vector 7.07107 -240.255 658.9)))
         (instance face :init :vertices (list (float-vector 10.0 -262.426 652.426) (float-vector 7.07107 -257.426 647.426) (float-vector 7.07107 -240.255 658.9) (float-vector 10.0 -242.961 665.433)))
         (instance face :init :vertices (list (float-vector 10.0 -275.433 632.961) (float-vector 7.07107 -268.9 630.255) (float-vector 7.07107 -257.426 647.426) (float-vector 10.0 -262.426 652.426)))
         (instance face :init :vertices (list (float-vector 7.07107 -272.929 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 -280.0 610.0) (float-vector 7.07107 -272.929 610.0) (float-vector 7.07107 -268.9 630.255) (float-vector 10.0 -275.433 632.961)))
         (instance face :init :vertices (list (float-vector 7.07107 -220.0 662.929)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -220.0 660.0) (float-vector 7.07107 -220.0 662.929) (float-vector 7.07107 -240.255 658.9) (float-vector 1.421085e-14 -239.134 656.194)))
         (instance face :init :vertices (list (float-vector 7.07107 -257.426 647.426) (float-vector 1.421085e-14 -255.355 645.355) (float-vector 1.421085e-14 -239.134 656.194) (float-vector 7.07107 -240.255 658.9)))
         (instance face :init :vertices (list (float-vector 7.07107 -268.9 630.255) (float-vector 0.0 -266.194 629.134) (float-vector 1.421085e-14 -255.355 645.355) (float-vector 7.07107 -257.426 647.426)))
         (instance face :init :vertices (list (float-vector 0.0 -270.0 610.0)))
         (instance face :init :vertices (list (float-vector 7.07107 -272.929 610.0) (float-vector 0.0 -270.0 610.0) (float-vector 0.0 -266.194 629.134) (float-vector 7.07107 -268.9 630.255)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -220.0 660.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -220.0 662.929) (float-vector 1.421085e-14 -220.0 660.0) (float-vector 1.421085e-14 -239.134 656.194) (float-vector -7.07107 -240.255 658.9)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 -255.355 645.355) (float-vector -7.07107 -257.426 647.426) (float-vector -7.07107 -240.255 658.9) (float-vector 1.421085e-14 -239.134 656.194)))
         (instance face :init :vertices (list (float-vector 0.0 -266.194 629.134) (float-vector -7.07107 -268.9 630.255) (float-vector -7.07107 -257.426 647.426) (float-vector 1.421085e-14 -255.355 645.355)))
         (instance face :init :vertices (list (float-vector -7.07107 -272.929 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 -270.0 610.0) (float-vector -7.07107 -272.929 610.0) (float-vector -7.07107 -268.9 630.255) (float-vector 0.0 -266.194 629.134)))
         (instance face :init :vertices (list (float-vector -7.07107 -220.0 662.929)))
         (instance face :init :vertices (list (float-vector -10.0 -220.0 670.0) (float-vector -7.07107 -220.0 662.929) (float-vector -7.07107 -240.255 658.9) (float-vector -10.0 -242.961 665.433)))
         (instance face :init :vertices (list (float-vector -7.07107 -257.426 647.426) (float-vector -10.0 -262.426 652.426) (float-vector -10.0 -242.961 665.433) (float-vector -7.07107 -240.255 658.9)))
         (instance face :init :vertices (list (float-vector -7.07107 -268.9 630.255) (float-vector -10.0 -275.433 632.961) (float-vector -10.0 -262.426 652.426) (float-vector -7.07107 -257.426 647.426)))
         (instance face :init :vertices (list (float-vector -10.0 -280.0 610.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -272.929 610.0) (float-vector -10.0 -280.0 610.0) (float-vector -10.0 -275.433 632.961) (float-vector -7.07107 -268.9 630.255)))
         (instance face :init :vertices (list (float-vector -10.0 -220.0 670.0)))
         (instance face :init :vertices (list (float-vector -7.07107 -220.0 677.071) (float-vector -10.0 -220.0 670.0) (float-vector -10.0 -242.961 665.433) (float-vector -7.07107 -245.667 671.966)))
         (instance face :init :vertices (list (float-vector -10.0 -262.426 652.426) (float-vector -7.07107 -267.426 657.426) (float-vector -7.07107 -245.667 671.966) (float-vector -10.0 -242.961 665.433)))
         (instance face :init :vertices (list (float-vector -10.0 -275.433 632.961) (float-vector -7.07107 -281.966 635.667) (float-vector -7.07107 -267.426 657.426) (float-vector -10.0 -262.426 652.426)))
         (instance face :init :vertices (list (float-vector -7.07107 -287.071 610.0)))
         (instance face :init :vertices (list (float-vector -10.0 -280.0 610.0) (float-vector -7.07107 -287.071 610.0) (float-vector -7.07107 -281.966 635.667) (float-vector -10.0 -275.433 632.961)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 7.07107 220.0 677.071)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 220.0 680.0) (float-vector 7.07107 220.0 677.071) (float-vector 7.07107 245.667 671.966) (float-vector 1.421085e-14 246.788 674.672)))
         (instance face :init :vertices (list (float-vector 7.07107 245.667 671.966) (float-vector 7.07107 267.426 657.426) (float-vector 1.421085e-14 269.497 659.497) (float-vector 1.421085e-14 246.788 674.672)))
         (instance face :init :vertices (list (float-vector 7.07107 267.426 657.426) (float-vector 7.07107 281.966 635.667) (float-vector 0.0 284.672 636.788) (float-vector 1.421085e-14 269.497 659.497)))
         (instance face :init :vertices (list (float-vector 0.0 290.0 610.0)))
         (instance face :init :vertices (list (float-vector 7.07107 281.966 635.667) (float-vector 7.07107 287.071 610.0) (float-vector 0.0 290.0 610.0) (float-vector 0.0 284.672 636.788)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 220.0 680.0)))
         (instance face :init :vertices (list (float-vector -7.07107 220.0 677.071) (float-vector 1.421085e-14 220.0 680.0) (float-vector 1.421085e-14 246.788 674.672) (float-vector -7.07107 245.667 671.966)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 269.497 659.497) (float-vector -7.07107 267.426 657.426) (float-vector -7.07107 245.667 671.966) (float-vector 1.421085e-14 246.788 674.672)))
         (instance face :init :vertices (list (float-vector 0.0 284.672 636.788) (float-vector -7.07107 281.966 635.667) (float-vector -7.07107 267.426 657.426) (float-vector 1.421085e-14 269.497 659.497)))
         (instance face :init :vertices (list (float-vector -7.07107 287.071 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 290.0 610.0) (float-vector -7.07107 287.071 610.0) (float-vector -7.07107 281.966 635.667) (float-vector 0.0 284.672 636.788)))
         (instance face :init :vertices (list (float-vector -7.07107 220.0 677.071)))
         (instance face :init :vertices (list (float-vector -10.0 220.0 670.0) (float-vector -7.07107 220.0 677.071) (float-vector -7.07107 245.667 671.966) (float-vector -10.0 242.961 665.433)))
         (instance face :init :vertices (list (float-vector -7.07107 267.426 657.426) (float-vector -10.0 262.426 652.426) (float-vector -10.0 242.961 665.433) (float-vector -7.07107 245.667 671.966)))
         (instance face :init :vertices (list (float-vector -7.07107 281.966 635.667) (float-vector -10.0 275.433 632.961) (float-vector -10.0 262.426 652.426) (float-vector -7.07107 267.426 657.426)))
         (instance face :init :vertices (list (float-vector -10.0 280.0 610.0)))
         (instance face :init :vertices (list (float-vector -7.07107 287.071 610.0) (float-vector -10.0 280.0 610.0) (float-vector -10.0 275.433 632.961) (float-vector -7.07107 281.966 635.667)))
         (instance face :init :vertices (list (float-vector -10.0 220.0 670.0)))
         (instance face :init :vertices (list (float-vector -7.07107 220.0 662.929) (float-vector -10.0 220.0 670.0) (float-vector -10.0 242.961 665.433) (float-vector -7.07107 240.255 658.9)))
         (instance face :init :vertices (list (float-vector -10.0 262.426 652.426) (float-vector -7.07107 257.426 647.426) (float-vector -7.07107 240.255 658.9) (float-vector -10.0 242.961 665.433)))
         (instance face :init :vertices (list (float-vector -10.0 275.433 632.961) (float-vector -7.07107 268.9 630.255) (float-vector -7.07107 257.426 647.426) (float-vector -10.0 262.426 652.426)))
         (instance face :init :vertices (list (float-vector -7.07107 272.929 610.0)))
         (instance face :init :vertices (list (float-vector -10.0 280.0 610.0) (float-vector -7.07107 272.929 610.0) (float-vector -7.07107 268.9 630.255) (float-vector -10.0 275.433 632.961)))
         (instance face :init :vertices (list (float-vector -7.07107 220.0 662.929)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 220.0 660.0) (float-vector -7.07107 220.0 662.929) (float-vector -7.07107 240.255 658.9) (float-vector 1.421085e-14 239.134 656.194)))
         (instance face :init :vertices (list (float-vector -7.07107 257.426 647.426) (float-vector 0.0 255.355 645.355) (float-vector 1.421085e-14 239.134 656.194) (float-vector -7.07107 240.255 658.9)))
         (instance face :init :vertices (list (float-vector -7.07107 268.9 630.255) (float-vector 0.0 266.194 629.134) (float-vector 0.0 255.355 645.355) (float-vector -7.07107 257.426 647.426)))
         (instance face :init :vertices (list (float-vector 0.0 270.0 610.0)))
         (instance face :init :vertices (list (float-vector -7.07107 272.929 610.0) (float-vector 0.0 270.0 610.0) (float-vector 0.0 266.194 629.134) (float-vector -7.07107 268.9 630.255)))
         (instance face :init :vertices (list (float-vector 1.421085e-14 220.0 660.0)))
         (instance face :init :vertices (list (float-vector 7.07107 220.0 662.929) (float-vector 1.421085e-14 220.0 660.0) (float-vector 1.421085e-14 239.134 656.194) (float-vector 7.07107 240.255 658.9)))
         (instance face :init :vertices (list (float-vector 0.0 255.355 645.355) (float-vector 7.07107 257.426 647.426) (float-vector 7.07107 240.255 658.9) (float-vector 1.421085e-14 239.134 656.194)))
         (instance face :init :vertices (list (float-vector 0.0 266.194 629.134) (float-vector 7.07107 268.9 630.255) (float-vector 7.07107 257.426 647.426) (float-vector 0.0 255.355 645.355)))
         (instance face :init :vertices (list (float-vector 7.07107 272.929 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 270.0 610.0) (float-vector 7.07107 272.929 610.0) (float-vector 7.07107 268.9 630.255) (float-vector 0.0 266.194 629.134)))
         (instance face :init :vertices (list (float-vector 7.07107 220.0 662.929)))
         (instance face :init :vertices (list (float-vector 10.0 220.0 670.0) (float-vector 7.07107 220.0 662.929) (float-vector 7.07107 240.255 658.9) (float-vector 10.0 242.961 665.433)))
         (instance face :init :vertices (list (float-vector 7.07107 257.426 647.426) (float-vector 10.0 262.426 652.426) (float-vector 10.0 242.961 665.433) (float-vector 7.07107 240.255 658.9)))
         (instance face :init :vertices (list (float-vector 7.07107 268.9 630.255) (float-vector 10.0 275.433 632.961) (float-vector 10.0 262.426 652.426) (float-vector 7.07107 257.426 647.426)))
         (instance face :init :vertices (list (float-vector 10.0 280.0 610.0)))
         (instance face :init :vertices (list (float-vector 7.07107 272.929 610.0) (float-vector 10.0 280.0 610.0) (float-vector 10.0 275.433 632.961) (float-vector 7.07107 268.9 630.255)))
         (instance face :init :vertices (list (float-vector 10.0 220.0 670.0)))
         (instance face :init :vertices (list (float-vector 7.07107 220.0 677.071) (float-vector 10.0 220.0 670.0) (float-vector 10.0 242.961 665.433) (float-vector 7.07107 245.667 671.966)))
         (instance face :init :vertices (list (float-vector 10.0 262.426 652.426) (float-vector 7.07107 267.426 657.426) (float-vector 7.07107 245.667 671.966) (float-vector 10.0 242.961 665.433)))
         (instance face :init :vertices (list (float-vector 10.0 275.433 632.961) (float-vector 7.07107 281.966 635.667) (float-vector 7.07107 267.426 657.426) (float-vector 10.0 262.426 652.426)))
         (instance face :init :vertices (list (float-vector 7.07107 287.071 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 280.0 610.0) (float-vector 7.07107 287.071 610.0) (float-vector 7.07107 281.966 635.667) (float-vector 10.0 275.433 632.961)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 -285.0 610.0) (float-vector 10.0 -280.0 610.0) (float-vector 8.66025 -275.0 610.0) (float-vector 5.0 -271.34 610.0) (float-vector 0.0 -270.0 610.0) (float-vector -5.0 -271.34 610.0) (float-vector -8.66025 -275.0 610.0) (float-vector -10.0 -280.0 610.0) (float-vector -8.66025 -285.0 610.0) (float-vector -5.0 -288.66 610.0) (float-vector -1.421085e-14 -290.0 610.0) (float-vector 5.0 -288.66 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 -280.0 1.136868e-13) (float-vector 8.66025 -285.0 1.136868e-13) (float-vector 5.0 -288.66 1.136868e-13) (float-vector -1.421085e-14 -290.0 1.136868e-13) (float-vector -5.0 -288.66 1.136868e-13) (float-vector -8.66025 -285.0 1.136868e-13) (float-vector -10.0 -280.0 1.136868e-13) (float-vector -8.66025 -275.0 1.136868e-13) (float-vector -5.0 -271.34 1.136868e-13) (float-vector 0.0 -270.0 1.136868e-13) (float-vector 5.0 -271.34 1.136868e-13) (float-vector 8.66025 -275.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 8.66025 -285.0 610.0) (float-vector 8.66025 -285.0 1.136868e-13) (float-vector 10.0 -280.0 1.136868e-13) (float-vector 10.0 -280.0 610.0)))
         (instance face :init :vertices (list (float-vector 5.0 -288.66 610.0) (float-vector 5.0 -288.66 1.136868e-13) (float-vector 8.66025 -285.0 1.136868e-13) (float-vector 8.66025 -285.0 610.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 -290.0 610.0) (float-vector -1.421085e-14 -290.0 1.136868e-13) (float-vector 5.0 -288.66 1.136868e-13) (float-vector 5.0 -288.66 610.0)))
         (instance face :init :vertices (list (float-vector -5.0 -288.66 610.0) (float-vector -5.0 -288.66 1.136868e-13) (float-vector -1.421085e-14 -290.0 1.136868e-13) (float-vector -1.421085e-14 -290.0 610.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -285.0 610.0) (float-vector -8.66025 -285.0 1.136868e-13) (float-vector -5.0 -288.66 1.136868e-13) (float-vector -5.0 -288.66 610.0)))
         (instance face :init :vertices (list (float-vector -10.0 -280.0 610.0) (float-vector -10.0 -280.0 1.136868e-13) (float-vector -8.66025 -285.0 1.136868e-13) (float-vector -8.66025 -285.0 610.0)))
         (instance face :init :vertices (list (float-vector -8.66025 -275.0 610.0) (float-vector -8.66025 -275.0 1.136868e-13) (float-vector -10.0 -280.0 1.136868e-13) (float-vector -10.0 -280.0 610.0)))
         (instance face :init :vertices (list (float-vector -5.0 -271.34 610.0) (float-vector -5.0 -271.34 1.136868e-13) (float-vector -8.66025 -275.0 1.136868e-13) (float-vector -8.66025 -275.0 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 -270.0 610.0) (float-vector 0.0 -270.0 1.136868e-13) (float-vector -5.0 -271.34 1.136868e-13) (float-vector -5.0 -271.34 610.0)))
         (instance face :init :vertices (list (float-vector 5.0 -271.34 610.0) (float-vector 5.0 -271.34 1.136868e-13) (float-vector 0.0 -270.0 1.136868e-13) (float-vector 0.0 -270.0 610.0)))
         (instance face :init :vertices (list (float-vector 8.66025 -275.0 610.0) (float-vector 8.66025 -275.0 1.136868e-13) (float-vector 5.0 -271.34 1.136868e-13) (float-vector 5.0 -271.34 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 -280.0 610.0) (float-vector 10.0 -280.0 1.136868e-13) (float-vector 8.66025 -275.0 1.136868e-13) (float-vector 8.66025 -275.0 610.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 8.66025 275.0 610.0) (float-vector 10.0 280.0 610.0) (float-vector 8.66025 285.0 610.0) (float-vector 5.0 288.66 610.0) (float-vector 0.0 290.0 610.0) (float-vector -5.0 288.66 610.0) (float-vector -8.66025 285.0 610.0) (float-vector -10.0 280.0 610.0) (float-vector -8.66025 275.0 610.0) (float-vector -5.0 271.34 610.0) (float-vector -1.421085e-14 270.0 610.0) (float-vector 5.0 271.34 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 280.0 0.0) (float-vector 8.66025 275.0 0.0) (float-vector 5.0 271.34 0.0) (float-vector -1.421085e-14 270.0 0.0) (float-vector -5.0 271.34 0.0) (float-vector -8.66025 275.0 0.0) (float-vector -10.0 280.0 0.0) (float-vector -8.66025 285.0 0.0) (float-vector -5.0 288.66 0.0) (float-vector 0.0 290.0 0.0) (float-vector 5.0 288.66 0.0) (float-vector 8.66025 285.0 0.0)))
         (instance face :init :vertices (list (float-vector 8.66025 275.0 610.0) (float-vector 8.66025 275.0 0.0) (float-vector 10.0 280.0 0.0) (float-vector 10.0 280.0 610.0)))
         (instance face :init :vertices (list (float-vector 5.0 271.34 610.0) (float-vector 5.0 271.34 0.0) (float-vector 8.66025 275.0 0.0) (float-vector 8.66025 275.0 610.0)))
         (instance face :init :vertices (list (float-vector -1.421085e-14 270.0 610.0) (float-vector -1.421085e-14 270.0 0.0) (float-vector 5.0 271.34 0.0) (float-vector 5.0 271.34 610.0)))
         (instance face :init :vertices (list (float-vector -5.0 271.34 610.0) (float-vector -5.0 271.34 0.0) (float-vector -1.421085e-14 270.0 0.0) (float-vector -1.421085e-14 270.0 610.0)))
         (instance face :init :vertices (list (float-vector -8.66025 275.0 610.0) (float-vector -8.66025 275.0 0.0) (float-vector -5.0 271.34 0.0) (float-vector -5.0 271.34 610.0)))
         (instance face :init :vertices (list (float-vector -10.0 280.0 610.0) (float-vector -10.0 280.0 0.0) (float-vector -8.66025 275.0 0.0) (float-vector -8.66025 275.0 610.0)))
         (instance face :init :vertices (list (float-vector -8.66025 285.0 610.0) (float-vector -8.66025 285.0 0.0) (float-vector -10.0 280.0 0.0) (float-vector -10.0 280.0 610.0)))
         (instance face :init :vertices (list (float-vector -5.0 288.66 610.0) (float-vector -5.0 288.66 0.0) (float-vector -8.66025 285.0 0.0) (float-vector -8.66025 285.0 610.0)))
         (instance face :init :vertices (list (float-vector 0.0 290.0 610.0) (float-vector 0.0 290.0 0.0) (float-vector -5.0 288.66 0.0) (float-vector -5.0 288.66 610.0)))
         (instance face :init :vertices (list (float-vector 5.0 288.66 610.0) (float-vector 5.0 288.66 0.0) (float-vector 0.0 290.0 0.0) (float-vector 0.0 290.0 610.0)))
         (instance face :init :vertices (list (float-vector 8.66025 285.0 610.0) (float-vector 8.66025 285.0 0.0) (float-vector 5.0 288.66 0.0) (float-vector 5.0 288.66 610.0)))
         (instance face :init :vertices (list (float-vector 10.0 280.0 610.0) (float-vector 10.0 280.0 0.0) (float-vector 8.66025 285.0 0.0) (float-vector 8.66025 285.0 610.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :gray)
     (send (elt bc 1) :set-color :gray)
     (send (elt bc 2) :set-color :gray)
     (send (elt bc 3) :set-color :gray)
     (send (elt bc 4) :set-color :gray)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :bar :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink5 :newcoords (make-coords :pos (float-vector -30.0 0.0 -110.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink4 :assoc blink5)
     (send blink7 :newcoords (make-coords :pos (float-vector -30.0 0.0 -110.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink6 :assoc blink7)
     (send blink1 :newcoords (make-coords :pos (float-vector 80.0 0.0 220.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send blink6 :newcoords (make-coords :pos (float-vector 700.0 -245.0 170.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink6)
     (send blink4 :newcoords (make-coords :pos (float-vector 700.0 245.0 170.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink4)
     (send blink3 :newcoords (make-coords :pos (float-vector 140.0 -245.0 60.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink3)
     (send blink2 :newcoords (make-coords :pos (float-vector 140.0 245.0 60.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink2)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :bar
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :bar       :axis :y 
			     :min    0.0 :max   90.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :rear-left-wheel
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink2 :name :rear-left-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :rear-right-wheel
     (setq joint2 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink3 :name :rear-right-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :left-front-fork
     (setq joint3 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink4 :name :left-front-fork :axis :z 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :front-left-wheel
     (setq joint4 (instance rotational-joint :init
			     :parent-link blink4 :child-link blink5 :name :front-left-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :right-front-fork
     (setq joint5 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink6 :name :right-front-fork :axis :z 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :front-right-wheel
     (setq joint6 (instance rotational-joint :init
			     :parent-link blink6 :child-link blink7 :name :front-right-wheel :axis :y 
			     :min -10000000000.0 :max 10000000000.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; definition of :handle
     (setq handle0 (make-cascoords :pos (float-vector 80.0 240.0 850.0) :rot #2f((1.0 0.0 0.0) (0.0 0.707107 -0.707107) (0.0 0.707107 0.707107)) :name ":larm"))
     (send blink0 :assoc handle0)
     (setq handle1 (make-cascoords :pos (float-vector 80.0 -240.0 850.0) :rot #2f((1.0 0.0 0.0) (0.0 0.707107 0.707107) (0.0 -0.707107 0.707107)) :name ":rarm"))
     (send blink0 :assoc handle1)
     (setq handle2 (make-cascoords :pos (float-vector 540.0 60.0 220.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0)) :name ":top-face"))
     (send blink0 :assoc handle2)

     ;; init-ending 
     (setq links (list blink0 blink1 blink2 blink3 blink4 blink5 blink6 blink7))
     (setq joint-list (list joint0 joint1 joint2 joint3 joint4 joint5 joint6))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:bar (&rest args) (forward-message-to joint0 args))
  (:rear-left-wheel (&rest args) (forward-message-to joint1 args))
  (:rear-right-wheel (&rest args) (forward-message-to joint2 args))
  (:left-front-fork (&rest args) (forward-message-to joint3 args))
  (:front-left-wheel (&rest args) (forward-message-to joint4 args))
  (:right-front-fork (&rest args) (forward-message-to joint5 args))
  (:front-right-wheel (&rest args) (forward-message-to joint6 args))
  (:handle (&rest args) (forward-message-to-all (list  handle0 handle1 handle2) args))
  (:handle-larm (&rest args) (forward-message-to handle0 args))
  (:handle-rarm (&rest args) (forward-message-to handle1 args))
  (:handle-top-face (&rest args) (forward-message-to handle2 args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun gifuplastic-900-cart (&rest args) (instance* gifuplastic-900-cart-object :init args))
;; (format *error-output* "(instance gifuplastic-900-cart-object :init) for generating model~%")
