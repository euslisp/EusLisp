;;
;; DO NOT EDIT THIS FILE
;; this file is automatically generated from euslisp+euslib version 
;;
;;
(defclass drcbox-hose-reel-object
  :super cascaded-link
  :slots (sensors
         joint0 joint1 ))
(defmethod drcbox-hose-reel-object
  (:init
   (&rest args &key (name "drcbox-hose-reel") (pos (float-vector 0 0 0)) (rot (unit-matrix 3)) &allow-other-keys)
   (let (c bc
         blink0 blink1 blink2
                 )
     (send-super* :init :name name args)

     ;; definition of link

     ;; definition of :root-link
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 80.0 -100.0) (float-vector -60.0 0.0 -100.0) (float-vector -60.0 0.0 100.0) (float-vector 0.0 80.0 100.0) (float-vector 0.0 80.0 95.0) (float-vector -56.25 5.0 95.0) (float-vector -56.25 5.0 -95.0) (float-vector 0.0 80.0 -95.0)))
         (instance face :init :vertices (list (float-vector 60.0 0.0 -100.0) (float-vector 60.0 0.0 100.0) (float-vector -60.0 0.0 100.0) (float-vector -60.0 0.0 -100.0)))
         (instance face :init :vertices (list (float-vector 0.0 80.0 100.0) (float-vector -60.0 0.0 100.0) (float-vector 60.0 0.0 100.0)))
         (instance face :init :vertices (list (float-vector 60.0 0.0 -100.0) (float-vector -60.0 0.0 -100.0) (float-vector 0.0 80.0 -100.0)))
         (instance face :init :vertices (list (float-vector 0.0 80.0 -100.0) (float-vector 0.0 80.0 -95.0) (float-vector 56.25 5.0 -95.0) (float-vector 56.25 5.0 95.0) (float-vector 0.0 80.0 95.0) (float-vector 0.0 80.0 100.0) (float-vector 60.0 0.0 100.0) (float-vector 60.0 0.0 -100.0)))
         (instance face :init :vertices (list (float-vector -56.25 5.0 95.0) (float-vector 0.0 80.0 95.0) (float-vector 56.25 5.0 95.0)))
         (instance face :init :vertices (list (float-vector -56.25 5.0 -95.0) (float-vector -56.25 5.0 95.0) (float-vector 56.25 5.0 95.0) (float-vector 56.25 5.0 -95.0)))
         (instance face :init :vertices (list (float-vector 56.25 5.0 -95.0) (float-vector 0.0 80.0 -95.0) (float-vector -56.25 5.0 -95.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :red)
     (setq blink0 (instance bodyset-link :init (make-cascoords) :bodies bc :name :root-link :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :connect-link
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 0.0 0.0 -100.0) (float-vector 75.0 80.0 -100.0) (float-vector 75.0 80.0 100.0) (float-vector 0.0 0.0 100.0) (float-vector 0.0 0.0 95.0) (float-vector 70.3125 75.0 95.0) (float-vector 70.3125 75.0 -95.0) (float-vector 0.0 0.0 -95.0)))
         (instance face :init :vertices (list (float-vector -75.0 80.0 -100.0) (float-vector -75.0 80.0 100.0) (float-vector 75.0 80.0 100.0) (float-vector 75.0 80.0 -100.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 100.0) (float-vector 75.0 80.0 100.0) (float-vector -75.0 80.0 100.0)))
         (instance face :init :vertices (list (float-vector -75.0 80.0 -100.0) (float-vector 75.0 80.0 -100.0) (float-vector 0.0 0.0 -100.0)))
         (instance face :init :vertices (list (float-vector 0.0 0.0 -100.0) (float-vector 0.0 0.0 -95.0) (float-vector -70.3125 75.0 -95.0) (float-vector -70.3125 75.0 95.0) (float-vector 0.0 0.0 95.0) (float-vector 0.0 0.0 100.0) (float-vector -75.0 80.0 100.0) (float-vector -75.0 80.0 -100.0)))
         (instance face :init :vertices (list (float-vector 70.3125 75.0 95.0) (float-vector 0.0 0.0 95.0) (float-vector -70.3125 75.0 95.0)))
         (instance face :init :vertices (list (float-vector 70.3125 75.0 -95.0) (float-vector 70.3125 75.0 95.0) (float-vector -70.3125 75.0 95.0) (float-vector -70.3125 75.0 -95.0)))
         (instance face :init :vertices (list (float-vector -70.3125 75.0 -95.0) (float-vector 0.0 0.0 -95.0) (float-vector 70.3125 75.0 -95.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 70.0 340.0 -20.0) (float-vector 70.0 340.0 20.0) (float-vector 75.0 340.0 20.0) (float-vector 75.0 340.0 -20.0)))
         (instance face :init :vertices (list (float-vector -75.0 340.0 -20.0) (float-vector -75.0 340.0 20.0) (float-vector -70.0 340.0 20.0) (float-vector -70.0 340.0 -20.0)))
         (instance face :init :vertices (list (float-vector -75.0 80.0 100.0) (float-vector 75.0 80.0 100.0) (float-vector 75.0 340.0 20.0) (float-vector 70.0 340.0 20.0) (float-vector 70.0 85.0 98.4615) (float-vector -70.0 85.0 98.4615) (float-vector -70.0 340.0 20.0) (float-vector -75.0 340.0 20.0)))
         (instance face :init :vertices (list (float-vector -75.0 80.0 -100.0) (float-vector 75.0 80.0 -100.0) (float-vector 75.0 80.0 100.0) (float-vector -75.0 80.0 100.0)))
         (instance face :init :vertices (list (float-vector 75.0 340.0 -20.0) (float-vector 75.0 340.0 20.0) (float-vector 75.0 80.0 100.0) (float-vector 75.0 80.0 -100.0)))
         (instance face :init :vertices (list (float-vector -75.0 80.0 -100.0) (float-vector -75.0 80.0 100.0) (float-vector -75.0 340.0 20.0) (float-vector -75.0 340.0 -20.0)))
         (instance face :init :vertices (list (float-vector -75.0 340.0 -20.0) (float-vector -70.0 340.0 -20.0) (float-vector -70.0 85.0 -98.4615) (float-vector 70.0 85.0 -98.4615) (float-vector 70.0 340.0 -20.0) (float-vector 75.0 340.0 -20.0) (float-vector 75.0 80.0 -100.0) (float-vector -75.0 80.0 -100.0)))
         (instance face :init :vertices (list (float-vector 70.0 85.0 98.4615) (float-vector 70.0 340.0 20.0) (float-vector 70.0 340.0 -20.0) (float-vector 70.0 85.0 -98.4615)))
         (instance face :init :vertices (list (float-vector -70.0 85.0 98.4615) (float-vector 70.0 85.0 98.4615) (float-vector 70.0 85.0 -98.4615) (float-vector -70.0 85.0 -98.4615)))
         (instance face :init :vertices (list (float-vector -70.0 85.0 -98.4615) (float-vector -70.0 340.0 -20.0) (float-vector -70.0 340.0 20.0) (float-vector -70.0 85.0 98.4615)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :red)
     (send (elt bc 1) :set-color :red)
     (setq blink1 (instance bodyset-link :init (make-cascoords) :bodies bc :name :connect-link :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of :reel-link
     (setq bc (list
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 50.0 -50.0 -86.6025) (float-vector 50.0 0.0 -100.0) (float-vector 50.0 50.0 -86.6025) (float-vector 50.0 86.6025 -50.0) (float-vector 50.0 100.0 0.0) (float-vector 50.0 86.6025 50.0) (float-vector 50.0 50.0 86.6025) (float-vector 50.0 1.136868e-13 100.0) (float-vector 50.0 -50.0 86.6025) (float-vector 50.0 -86.6025 50.0) (float-vector 50.0 -100.0 2.273737e-13) (float-vector 50.0 -86.6025 -50.0)))
         (instance face :init :vertices (list (float-vector -50.0 0.0 -100.0) (float-vector -50.0 -50.0 -86.6025) (float-vector -50.0 -86.6025 -50.0) (float-vector -50.0 -100.0 1.136868e-13) (float-vector -50.0 -86.6025 50.0) (float-vector -50.0 -50.0 86.6025) (float-vector -50.0 1.136868e-13 100.0) (float-vector -50.0 50.0 86.6025) (float-vector -50.0 86.6025 50.0) (float-vector -50.0 100.0 0.0) (float-vector -50.0 86.6025 -50.0) (float-vector -50.0 50.0 -86.6025)))
         (instance face :init :vertices (list (float-vector 50.0 -50.0 -86.6025) (float-vector -50.0 -50.0 -86.6025) (float-vector -50.0 0.0 -100.0) (float-vector 50.0 0.0 -100.0)))
         (instance face :init :vertices (list (float-vector 50.0 -86.6025 -50.0) (float-vector -50.0 -86.6025 -50.0) (float-vector -50.0 -50.0 -86.6025) (float-vector 50.0 -50.0 -86.6025)))
         (instance face :init :vertices (list (float-vector 50.0 -100.0 2.273737e-13) (float-vector -50.0 -100.0 1.136868e-13) (float-vector -50.0 -86.6025 -50.0) (float-vector 50.0 -86.6025 -50.0)))
         (instance face :init :vertices (list (float-vector 50.0 -86.6025 50.0) (float-vector -50.0 -86.6025 50.0) (float-vector -50.0 -100.0 1.136868e-13) (float-vector 50.0 -100.0 2.273737e-13)))
         (instance face :init :vertices (list (float-vector 50.0 -50.0 86.6025) (float-vector -50.0 -50.0 86.6025) (float-vector -50.0 -86.6025 50.0) (float-vector 50.0 -86.6025 50.0)))
         (instance face :init :vertices (list (float-vector 50.0 1.136868e-13 100.0) (float-vector -50.0 1.136868e-13 100.0) (float-vector -50.0 -50.0 86.6025) (float-vector 50.0 -50.0 86.6025)))
         (instance face :init :vertices (list (float-vector 50.0 50.0 86.6025) (float-vector -50.0 50.0 86.6025) (float-vector -50.0 1.136868e-13 100.0) (float-vector 50.0 1.136868e-13 100.0)))
         (instance face :init :vertices (list (float-vector 50.0 86.6025 50.0) (float-vector -50.0 86.6025 50.0) (float-vector -50.0 50.0 86.6025) (float-vector 50.0 50.0 86.6025)))
         (instance face :init :vertices (list (float-vector 50.0 100.0 0.0) (float-vector -50.0 100.0 0.0) (float-vector -50.0 86.6025 50.0) (float-vector 50.0 86.6025 50.0)))
         (instance face :init :vertices (list (float-vector 50.0 86.6025 -50.0) (float-vector -50.0 86.6025 -50.0) (float-vector -50.0 100.0 0.0) (float-vector 50.0 100.0 0.0)))
         (instance face :init :vertices (list (float-vector 50.0 50.0 -86.6025) (float-vector -50.0 50.0 -86.6025) (float-vector -50.0 86.6025 -50.0) (float-vector 50.0 86.6025 -50.0)))
         (instance face :init :vertices (list (float-vector 50.0 0.0 -100.0) (float-vector -50.0 0.0 -100.0) (float-vector -50.0 50.0 -86.6025) (float-vector 50.0 50.0 -86.6025)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector 50.0 222.0 15.0) (float-vector 50.0 138.0 15.0) (float-vector 40.0 138.0 15.0) (float-vector 40.0 222.0 15.0)))
         (instance face :init :vertices (list (float-vector 50.0 222.0 15.0) (float-vector 40.0 222.0 15.0) (float-vector 40.0 222.0 -15.0) (float-vector 50.0 222.0 -15.0)))
         (instance face :init :vertices (list (float-vector 40.0 138.0 15.0) (float-vector 50.0 138.0 15.0) (float-vector 50.0 138.0 -15.0) (float-vector 40.0 138.0 -15.0)))
         (instance face :init :vertices (list (float-vector 50.0 222.0 -15.0) (float-vector 40.0 222.0 -15.0) (float-vector 40.0 138.0 -15.0) (float-vector 50.0 138.0 -15.0)))
         (instance face :init :vertices (list (float-vector 50.0 15.0 222.0) (float-vector 50.0 -15.0 222.0) (float-vector 40.0 -15.0 222.0) (float-vector 40.0 15.0 222.0)))
         (instance face :init :vertices (list (float-vector 50.0 15.0 222.0) (float-vector 40.0 15.0 222.0) (float-vector 40.0 15.0 138.0) (float-vector 50.0 15.0 138.0)))
         (instance face :init :vertices (list (float-vector 40.0 -15.0 222.0) (float-vector 50.0 -15.0 222.0) (float-vector 50.0 -15.0 138.0) (float-vector 40.0 -15.0 138.0)))
         (instance face :init :vertices (list (float-vector 40.0 -15.0 138.0) (float-vector 50.0 -15.0 138.0) (float-vector 50.0 15.0 138.0) (float-vector 40.0 15.0 138.0)))
         (instance face :init :vertices (list (float-vector 50.0 0.0 240.0) (float-vector 40.0 0.0 240.0) (float-vector 40.0 -120.0 207.846) (float-vector 50.0 -120.0 207.846)))
         (instance face :init :vertices (list (float-vector 50.0 0.0 240.0) (float-vector 50.0 -120.0 207.846) (float-vector 50.0 -207.846 120.0) (float-vector 50.0 -240.0 -3.410605e-13) (float-vector 50.0 -207.846 -120.0) (float-vector 50.0 -120.0 -207.846) (float-vector 50.0 2.273737e-13 -240.0) (float-vector 50.0 120.0 -207.846) (float-vector 50.0 207.846 -120.0) (float-vector 50.0 240.0 1.136868e-13) (float-vector 50.0 207.846 120.0) (float-vector 50.0 120.0 207.846))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 50.0 -15.0 -222.0) (float-vector 50.0 -15.0 -138.0) (float-vector 50.0 15.0 -138.0) (float-vector 50.0 15.0 -222.0)))
         (instance hole :init :vertices (list (float-vector 50.0 -15.0 138.0) (float-vector 50.0 -15.0 222.0) (float-vector 50.0 15.0 222.0) (float-vector 50.0 15.0 138.0)))
         (instance hole :init :vertices (list (float-vector 50.0 138.0 -15.0) (float-vector 50.0 138.0 15.0) (float-vector 50.0 222.0 15.0) (float-vector 50.0 222.0 -15.0)))
         (instance hole :init :vertices (list (float-vector 50.0 -138.0 15.0) (float-vector 50.0 -138.0 -15.0) (float-vector 50.0 -222.0 -15.0) (float-vector 50.0 -222.0 15.0)))
))
         (instance face :init :vertices (list (float-vector 40.0 -120.0 207.846) (float-vector 40.0 0.0 240.0) (float-vector 40.0 120.0 207.846) (float-vector 40.0 207.846 120.0) (float-vector 40.0 240.0 1.136868e-13) (float-vector 40.0 207.846 -120.0) (float-vector 40.0 120.0 -207.846) (float-vector 40.0 2.273737e-13 -240.0) (float-vector 40.0 -120.0 -207.846) (float-vector 40.0 -207.846 -120.0) (float-vector 40.0 -240.0 -3.410605e-13) (float-vector 40.0 -207.846 120.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector 40.0 15.0 -222.0) (float-vector 40.0 15.0 -138.0) (float-vector 40.0 -15.0 -138.0) (float-vector 40.0 -15.0 -222.0)))
         (instance hole :init :vertices (list (float-vector 40.0 15.0 138.0) (float-vector 40.0 15.0 222.0) (float-vector 40.0 -15.0 222.0) (float-vector 40.0 -15.0 138.0)))
         (instance hole :init :vertices (list (float-vector 40.0 222.0 -15.0) (float-vector 40.0 222.0 15.0) (float-vector 40.0 138.0 15.0) (float-vector 40.0 138.0 -15.0)))
         (instance hole :init :vertices (list (float-vector 40.0 -222.0 15.0) (float-vector 40.0 -222.0 -15.0) (float-vector 40.0 -138.0 -15.0) (float-vector 40.0 -138.0 15.0)))
))
         (instance face :init :vertices (list (float-vector 50.0 -207.846 120.0) (float-vector 50.0 -120.0 207.846) (float-vector 40.0 -120.0 207.846) (float-vector 40.0 -207.846 120.0)))
         (instance face :init :vertices (list (float-vector 50.0 -240.0 -3.410605e-13) (float-vector 50.0 -207.846 120.0) (float-vector 40.0 -207.846 120.0) (float-vector 40.0 -240.0 -3.410605e-13)))
         (instance face :init :vertices (list (float-vector 50.0 -207.846 -120.0) (float-vector 50.0 -240.0 -3.410605e-13) (float-vector 40.0 -240.0 -3.410605e-13) (float-vector 40.0 -207.846 -120.0)))
         (instance face :init :vertices (list (float-vector 50.0 -120.0 -207.846) (float-vector 50.0 -207.846 -120.0) (float-vector 40.0 -207.846 -120.0) (float-vector 40.0 -120.0 -207.846)))
         (instance face :init :vertices (list (float-vector 50.0 2.273737e-13 -240.0) (float-vector 50.0 -120.0 -207.846) (float-vector 40.0 -120.0 -207.846) (float-vector 40.0 2.273737e-13 -240.0)))
         (instance face :init :vertices (list (float-vector 50.0 120.0 -207.846) (float-vector 50.0 2.273737e-13 -240.0) (float-vector 40.0 2.273737e-13 -240.0) (float-vector 40.0 120.0 -207.846)))
         (instance face :init :vertices (list (float-vector 50.0 207.846 -120.0) (float-vector 50.0 120.0 -207.846) (float-vector 40.0 120.0 -207.846) (float-vector 40.0 207.846 -120.0)))
         (instance face :init :vertices (list (float-vector 50.0 240.0 1.136868e-13) (float-vector 50.0 207.846 -120.0) (float-vector 40.0 207.846 -120.0) (float-vector 40.0 240.0 1.136868e-13)))
         (instance face :init :vertices (list (float-vector 50.0 207.846 120.0) (float-vector 50.0 240.0 1.136868e-13) (float-vector 40.0 240.0 1.136868e-13) (float-vector 40.0 207.846 120.0)))
         (instance face :init :vertices (list (float-vector 40.0 120.0 207.846) (float-vector 40.0 0.0 240.0) (float-vector 50.0 0.0 240.0) (float-vector 50.0 120.0 207.846)))
         (instance face :init :vertices (list (float-vector 50.0 120.0 207.846) (float-vector 50.0 207.846 120.0) (float-vector 40.0 207.846 120.0) (float-vector 40.0 120.0 207.846)))
         (instance face :init :vertices (list (float-vector 50.0 -15.0 -222.0) (float-vector 50.0 15.0 -222.0) (float-vector 40.0 15.0 -222.0) (float-vector 40.0 -15.0 -222.0)))
         (instance face :init :vertices (list (float-vector 50.0 -15.0 -138.0) (float-vector 50.0 -15.0 -222.0) (float-vector 40.0 -15.0 -222.0) (float-vector 40.0 -15.0 -138.0)))
         (instance face :init :vertices (list (float-vector 40.0 15.0 -138.0) (float-vector 40.0 15.0 -222.0) (float-vector 50.0 15.0 -222.0) (float-vector 50.0 15.0 -138.0)))
         (instance face :init :vertices (list (float-vector 50.0 15.0 -138.0) (float-vector 50.0 -15.0 -138.0) (float-vector 40.0 -15.0 -138.0) (float-vector 40.0 15.0 -138.0)))
         (instance face :init :vertices (list (float-vector 40.0 -138.0 -15.0) (float-vector 40.0 -222.0 -15.0) (float-vector 50.0 -222.0 -15.0) (float-vector 50.0 -138.0 -15.0)))
         (instance face :init :vertices (list (float-vector 50.0 -222.0 15.0) (float-vector 50.0 -222.0 -15.0) (float-vector 40.0 -222.0 -15.0) (float-vector 40.0 -222.0 15.0)))
         (instance face :init :vertices (list (float-vector 40.0 -138.0 15.0) (float-vector 40.0 -138.0 -15.0) (float-vector 50.0 -138.0 -15.0) (float-vector 50.0 -138.0 15.0)))
         (instance face :init :vertices (list (float-vector 50.0 -138.0 15.0) (float-vector 50.0 -222.0 15.0) (float-vector 40.0 -222.0 15.0) (float-vector 40.0 -138.0 15.0)))
       ))
       (instance faceset :init :faces (list
         (instance face :init :vertices (list (float-vector -50.0 222.0 -15.0) (float-vector -50.0 138.0 -15.0) (float-vector -40.0 138.0 -15.0) (float-vector -40.0 222.0 -15.0)))
         (instance face :init :vertices (list (float-vector -50.0 222.0 -15.0) (float-vector -40.0 222.0 -15.0) (float-vector -40.0 222.0 15.0) (float-vector -50.0 222.0 15.0)))
         (instance face :init :vertices (list (float-vector -40.0 138.0 -15.0) (float-vector -50.0 138.0 -15.0) (float-vector -50.0 138.0 15.0) (float-vector -40.0 138.0 15.0)))
         (instance face :init :vertices (list (float-vector -50.0 222.0 15.0) (float-vector -40.0 222.0 15.0) (float-vector -40.0 138.0 15.0) (float-vector -50.0 138.0 15.0)))
         (instance face :init :vertices (list (float-vector -50.0 15.0 -222.0) (float-vector -50.0 -15.0 -222.0) (float-vector -40.0 -15.0 -222.0) (float-vector -40.0 15.0 -222.0)))
         (instance face :init :vertices (list (float-vector -50.0 15.0 -222.0) (float-vector -40.0 15.0 -222.0) (float-vector -40.0 15.0 -138.0) (float-vector -50.0 15.0 -138.0)))
         (instance face :init :vertices (list (float-vector -40.0 -15.0 -222.0) (float-vector -50.0 -15.0 -222.0) (float-vector -50.0 -15.0 -138.0) (float-vector -40.0 -15.0 -138.0)))
         (instance face :init :vertices (list (float-vector -40.0 -15.0 -138.0) (float-vector -50.0 -15.0 -138.0) (float-vector -50.0 15.0 -138.0) (float-vector -40.0 15.0 -138.0)))
         (instance face :init :vertices (list (float-vector -50.0 0.0 -240.0) (float-vector -40.0 0.0 -240.0) (float-vector -40.0 -120.0 -207.846) (float-vector -50.0 -120.0 -207.846)))
         (instance face :init :vertices (list (float-vector -50.0 0.0 -240.0) (float-vector -50.0 -120.0 -207.846) (float-vector -50.0 -207.846 -120.0) (float-vector -50.0 -240.0 3.410605e-13) (float-vector -50.0 -207.846 120.0) (float-vector -50.0 -120.0 207.846) (float-vector -50.0 2.273737e-13 240.0) (float-vector -50.0 120.0 207.846) (float-vector -50.0 207.846 120.0) (float-vector -50.0 240.0 -1.136868e-13) (float-vector -50.0 207.846 -120.0) (float-vector -50.0 120.0 -207.846))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -50.0 -15.0 222.0) (float-vector -50.0 -15.0 138.0) (float-vector -50.0 15.0 138.0) (float-vector -50.0 15.0 222.0)))
         (instance hole :init :vertices (list (float-vector -50.0 -15.0 -138.0) (float-vector -50.0 -15.0 -222.0) (float-vector -50.0 15.0 -222.0) (float-vector -50.0 15.0 -138.0)))
         (instance hole :init :vertices (list (float-vector -50.0 138.0 15.0) (float-vector -50.0 138.0 -15.0) (float-vector -50.0 222.0 -15.0) (float-vector -50.0 222.0 15.0)))
         (instance hole :init :vertices (list (float-vector -50.0 -138.0 -15.0) (float-vector -50.0 -138.0 15.0) (float-vector -50.0 -222.0 15.0) (float-vector -50.0 -222.0 -15.0)))
))
         (instance face :init :vertices (list (float-vector -40.0 -120.0 -207.846) (float-vector -40.0 0.0 -240.0) (float-vector -40.0 120.0 -207.846) (float-vector -40.0 207.846 -120.0) (float-vector -40.0 240.0 -1.136868e-13) (float-vector -40.0 207.846 120.0) (float-vector -40.0 120.0 207.846) (float-vector -40.0 2.273737e-13 240.0) (float-vector -40.0 -120.0 207.846) (float-vector -40.0 -207.846 120.0) (float-vector -40.0 -240.0 3.410605e-13) (float-vector -40.0 -207.846 -120.0))
                              :holes (list
         (instance hole :init :vertices (list (float-vector -40.0 15.0 222.0) (float-vector -40.0 15.0 138.0) (float-vector -40.0 -15.0 138.0) (float-vector -40.0 -15.0 222.0)))
         (instance hole :init :vertices (list (float-vector -40.0 15.0 -138.0) (float-vector -40.0 15.0 -222.0) (float-vector -40.0 -15.0 -222.0) (float-vector -40.0 -15.0 -138.0)))
         (instance hole :init :vertices (list (float-vector -40.0 222.0 15.0) (float-vector -40.0 222.0 -15.0) (float-vector -40.0 138.0 -15.0) (float-vector -40.0 138.0 15.0)))
         (instance hole :init :vertices (list (float-vector -40.0 -222.0 -15.0) (float-vector -40.0 -222.0 15.0) (float-vector -40.0 -138.0 15.0) (float-vector -40.0 -138.0 -15.0)))
))
         (instance face :init :vertices (list (float-vector -50.0 -207.846 -120.0) (float-vector -50.0 -120.0 -207.846) (float-vector -40.0 -120.0 -207.846) (float-vector -40.0 -207.846 -120.0)))
         (instance face :init :vertices (list (float-vector -50.0 -240.0 3.410605e-13) (float-vector -50.0 -207.846 -120.0) (float-vector -40.0 -207.846 -120.0) (float-vector -40.0 -240.0 3.410605e-13)))
         (instance face :init :vertices (list (float-vector -50.0 -207.846 120.0) (float-vector -50.0 -240.0 3.410605e-13) (float-vector -40.0 -240.0 3.410605e-13) (float-vector -40.0 -207.846 120.0)))
         (instance face :init :vertices (list (float-vector -50.0 -120.0 207.846) (float-vector -50.0 -207.846 120.0) (float-vector -40.0 -207.846 120.0) (float-vector -40.0 -120.0 207.846)))
         (instance face :init :vertices (list (float-vector -50.0 2.273737e-13 240.0) (float-vector -50.0 -120.0 207.846) (float-vector -40.0 -120.0 207.846) (float-vector -40.0 2.273737e-13 240.0)))
         (instance face :init :vertices (list (float-vector -50.0 120.0 207.846) (float-vector -50.0 2.273737e-13 240.0) (float-vector -40.0 2.273737e-13 240.0) (float-vector -40.0 120.0 207.846)))
         (instance face :init :vertices (list (float-vector -50.0 207.846 120.0) (float-vector -50.0 120.0 207.846) (float-vector -40.0 120.0 207.846) (float-vector -40.0 207.846 120.0)))
         (instance face :init :vertices (list (float-vector -50.0 240.0 -1.136868e-13) (float-vector -50.0 207.846 120.0) (float-vector -40.0 207.846 120.0) (float-vector -40.0 240.0 -1.136868e-13)))
         (instance face :init :vertices (list (float-vector -50.0 207.846 -120.0) (float-vector -50.0 240.0 -1.136868e-13) (float-vector -40.0 240.0 -1.136868e-13) (float-vector -40.0 207.846 -120.0)))
         (instance face :init :vertices (list (float-vector -40.0 120.0 -207.846) (float-vector -40.0 0.0 -240.0) (float-vector -50.0 0.0 -240.0) (float-vector -50.0 120.0 -207.846)))
         (instance face :init :vertices (list (float-vector -50.0 120.0 -207.846) (float-vector -50.0 207.846 -120.0) (float-vector -40.0 207.846 -120.0) (float-vector -40.0 120.0 -207.846)))
         (instance face :init :vertices (list (float-vector -50.0 -15.0 222.0) (float-vector -50.0 15.0 222.0) (float-vector -40.0 15.0 222.0) (float-vector -40.0 -15.0 222.0)))
         (instance face :init :vertices (list (float-vector -50.0 -15.0 138.0) (float-vector -50.0 -15.0 222.0) (float-vector -40.0 -15.0 222.0) (float-vector -40.0 -15.0 138.0)))
         (instance face :init :vertices (list (float-vector -40.0 15.0 138.0) (float-vector -40.0 15.0 222.0) (float-vector -50.0 15.0 222.0) (float-vector -50.0 15.0 138.0)))
         (instance face :init :vertices (list (float-vector -50.0 15.0 138.0) (float-vector -50.0 -15.0 138.0) (float-vector -40.0 -15.0 138.0) (float-vector -40.0 15.0 138.0)))
         (instance face :init :vertices (list (float-vector -40.0 -138.0 15.0) (float-vector -40.0 -222.0 15.0) (float-vector -50.0 -222.0 15.0) (float-vector -50.0 -138.0 15.0)))
         (instance face :init :vertices (list (float-vector -50.0 -222.0 -15.0) (float-vector -50.0 -222.0 15.0) (float-vector -40.0 -222.0 15.0) (float-vector -40.0 -222.0 -15.0)))
         (instance face :init :vertices (list (float-vector -40.0 -138.0 -15.0) (float-vector -40.0 -138.0 15.0) (float-vector -50.0 -138.0 15.0) (float-vector -50.0 -138.0 -15.0)))
         (instance face :init :vertices (list (float-vector -50.0 -138.0 -15.0) (float-vector -50.0 -222.0 -15.0) (float-vector -40.0 -222.0 -15.0) (float-vector -40.0 -138.0 -15.0)))
       ))
       ))
     (dolist (b (cdr bc)) (send (car bc) :assoc b))
     (send (elt bc 0) :set-color :red)
     (send (elt bc 1) :set-color :red)
     (send (elt bc 2) :set-color :red)
     (setq blink2 (instance bodyset-link :init (make-cascoords) :bodies bc :name :reel-link :weight 1 :centroid (float-vector 0.0 0.0 0.0) :inertia-tensor #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))

     ;; definition of assoc
     (send blink2 :newcoords (make-coords :pos (float-vector 0.0 400.0 0.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink1 :assoc blink2)
     (send blink1 :newcoords (make-coords :pos (float-vector 0.0 50.0 5.0) :rot #2f((1.0 0.0 0.0) (0.0 1.0 0.0) (0.0 0.0 1.0))))
     (send blink0 :assoc blink1)
     (send self :assoc blink0)

     ;; definition of end-coords

     ;; definition of joint

     ;; definition of :root-joint
     (setq joint0 (instance rotational-joint :init
			     :parent-link blink0 :child-link blink1 :name :root-joint :axis :z 
			     :min -3600.0 :max 3600.0 :max-joint-velocity 5 :max-joint-torque 100))

     ;; definition of :reel-joint
     (setq joint1 (instance rotational-joint :init
			     :parent-link blink1 :child-link blink2 :name :reel-joint :axis :x 
			     :min -3600.0 :max 3600.0 :max-joint-velocity 5 :max-joint-torque 100))


     ;; init-ending 
     (setq links (list blink0 blink1 blink2))
     (setq joint-list (list joint0 joint1))
     (send self :init-ending)
     (send self :move-to (make-coords :pos pos :rot rot))
     (send-all links :worldcoords)

     self))

  (:root-joint (&rest args) (forward-message-to joint0 args))
  (:reel-joint (&rest args) (forward-message-to joint1 args))
  (:handle (&rest args) (forward-message-to-all (list ) args))
  (:attention (&rest args) (forward-message-to-all (list ) args))
  (:button (&rest args) (forward-message-to-all (list ) args))
  )

(defun drcbox-hose-reel (&rest args) (instance* drcbox-hose-reel-object :init args))
;; (format *error-output* "(instance drcbox-hose-reel-object :init) for generating model~%")
